{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2","program":"/Users/jackson/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","hashbrown","--edition=2018","/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"ahash\"","--cfg","feature=\"default\"","--cfg","feature=\"inline-more\"","--cfg","feature=\"raw\"","--cfg","feature=\"serde\"","-C","metadata=d7cdb73df900e76f","-C","extra-filename=-d7cdb73df900e76f","--out-dir","/Users/jackson/Documents/code/playground/rust-playground/bevy_playground/boids-rs/target/rls/debug/deps","-L","dependency=/Users/jackson/Documents/code/playground/rust-playground/bevy_playground/boids-rs/target/rls/debug/deps","--extern","ahash=/Users/jackson/Documents/code/playground/rust-playground/bevy_playground/boids-rs/target/rls/debug/deps/libahash-fe33afeecf64efde.rmeta","--extern","serde=/Users/jackson/Documents/code/playground/rust-playground/bevy_playground/boids-rs/target/rls/debug/deps/libserde-ea15f8ce122a2841.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/jackson/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/jackson/Documents/code/playground/rust-playground/bevy_playground/boids-rs/target/rls/debug/deps/libhashbrown-d7cdb73df900e76f.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[9088478009550783317,0]},"crate_root":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src","external_crates":[{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[14793976659495462539,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[3402831840469434398,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10266006331935790141,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[3256146445313423250,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":5,"id":{"name":"serde","disambiguator":[8165560518224493110,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":6,"id":{"name":"std","disambiguator":[8736441298905945133,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":7,"id":{"name":"libc","disambiguator":[17904618012795691138,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":8,"id":{"name":"unwind","disambiguator":[9322387616446168443,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":9,"id":{"name":"cfg_if","disambiguator":[3101585505833515335,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":10,"id":{"name":"hashbrown","disambiguator":[9998121223216013160,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13604153592636442655,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":12,"id":{"name":"std_detect","disambiguator":[4682215639508348019,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":13,"id":{"name":"rustc_demangle","disambiguator":[681692869457277629,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":14,"id":{"name":"addr2line","disambiguator":[14282542057858629160,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":15,"id":{"name":"gimli","disambiguator":[14550073586256240635,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":16,"id":{"name":"object","disambiguator":[6281633846692226065,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":17,"id":{"name":"memchr","disambiguator":[17361906875064838028,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[16875744454975590306,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","num":19,"id":{"name":"serde_derive","disambiguator":[14923659144645396593,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","num":20,"id":{"name":"ahash","disambiguator":[5147616631141160104,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","num":21,"id":{"name":"once_cell","disambiguator":[14434512543409285861,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","num":22,"id":{"name":"getrandom","disambiguator":[4104144744870242681,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","num":23,"id":{"name":"cfg_if","disambiguator":[13997309999588659716,0]}},{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","num":24,"id":{"name":"libc","disambiguator":[8238380484632325458,0]}}],"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":0,"byte_end":4820,"line_start":1,"line_end":161,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1623,"byte_end":1624,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"RawIter, RawTable, Global, Bucket, RawIntoIter, Allocator, RawDrain","parent":{"krate":0,"index":8}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2255,"byte_end":2256,"line_start":84,"line_end":84,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"HashMap","parent":{"krate":0,"index":1977}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2810,"byte_end":2811,"line_start":101,"line_end":101,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"HashSet","parent":{"krate":0,"index":1979}},{"kind":"Use","ref_id":{"krate":0,"index":688},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3193,"byte_end":3200,"line_start":114,"line_end":114,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1575},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3222,"byte_end":3229,"line_start":115,"line_end":115,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":0,"byte_end":4820,"line_start":1,"line_end":161,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":474},{"krate":0,"index":628},{"krate":0,"index":1474},{"krate":0,"index":1503},{"krate":0,"index":1977},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":2058},{"krate":0,"index":2063},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2072}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"/ This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"/ map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"/ and `HashSet` types.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\nmust_use_candidate, clippy :: option_if_let_else, clippy :: redundant_else,\nclippy :: manual_map)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":861,"byte_end":1051,"line_start":27,"line_end":34,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1052,"byte_end":1074,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1075,"byte_end":1101,"line_start":36,"line_end":36,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1451,"byte_end":1454,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":473}],"decl_id":null,"docs":" Experimental and unsafe `RawTable` API. This module is only available if the\n `raw` feature is enabled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1308,"byte_end":1331,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ Experimental and unsafe `RawTable` API. This module is only available if the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1332,"byte_end":1412,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ `raw` feature is enabled.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":1413,"byte_end":1442,"line_start":54,"line_end":54,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91638,"byte_end":91647,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"name":"Allocator","qualname":"::raw::inner::alloc::inner::Allocator","value":"Allocator","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91661,"byte_end":91669,"line_start":37,"line_end":37,"column_start":12,"column_end":20},"name":"allocate","qualname":"::raw::inner::alloc::inner::Allocator::allocate","value":"pub fn allocate(&Self, Layout) -> Result<NonNull<u8>, ()>","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91739,"byte_end":91749,"line_start":38,"line_end":38,"column_start":19,"column_end":29},"name":"deallocate","qualname":"::raw::inner::alloc::inner::Allocator::deallocate","value":"pub unsafe fn deallocate(&Self, NonNull<u8>, Layout)","parent":{"krate":0,"index":66},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2031},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91841,"byte_end":91847,"line_start":42,"line_end":42,"column_start":16,"column_end":22},"name":"Global","qualname":"::raw::inner::alloc::inner::Global","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":154},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16164,"byte_end":16170,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::inner::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":156}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":15901,"byte_end":15957,"line_start":277,"line_end":277,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":15958,"byte_end":15961,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":15962,"byte_end":16042,"line_start":279,"line_end":279,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16043,"byte_end":16119,"line_start":280,"line_end":280,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16120,"byte_end":16152,"line_start":281,"line_end":281,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":17523,"byte_end":17529,"line_start":323,"line_end":323,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"pub fn as_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":17503,"byte_end":17509,"line_start":322,"line_end":322,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18213,"byte_end":18217,"line_start":343,"line_end":343,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"pub unsafe fn drop(&Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18186,"byte_end":18192,"line_start":342,"line_end":342,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18339,"byte_end":18343,"line_start":347,"line_end":347,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"pub unsafe fn read(&Self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18312,"byte_end":18318,"line_start":346,"line_end":346,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18460,"byte_end":18465,"line_start":351,"line_end":351,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"pub unsafe fn write(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18433,"byte_end":18439,"line_start":350,"line_end":350,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18590,"byte_end":18596,"line_start":355,"line_end":355,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"pub unsafe fn as_ref<'a>(&Self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18563,"byte_end":18569,"line_start":354,"line_end":354,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18716,"byte_end":18722,"line_start":359,"line_end":359,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"pub unsafe fn as_mut<'a>(&Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18689,"byte_end":18695,"line_start":358,"line_end":358,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18850,"byte_end":18874,"line_start":363,"line_end":363,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping(&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18823,"byte_end":18829,"line_start":362,"line_end":362,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":176},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19026,"byte_end":19034,"line_start":369,"line_end":369,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::inner::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":18974,"byte_end":19014,"line_start":368,"line_end":368,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20239,"byte_end":20242,"line_start":402,"line_end":402,"column_start":18,"column_end":21},"name":"new","qualname":"<RawTable<T, Global>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19863,"byte_end":19928,"line_start":396,"line_end":396,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19933,"byte_end":19936,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19941,"byte_end":20013,"line_start":398,"line_end":398,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20018,"byte_end":20091,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20096,"byte_end":20172,"line_start":400,"line_end":400,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20213,"byte_end":20219,"line_start":401,"line_end":401,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20558,"byte_end":20575,"line_start":412,"line_end":412,"column_start":12,"column_end":29},"name":"try_with_capacity","qualname":"<RawTable<T, Global>>::try_with_capacity","value":"pub fn try_with_capacity(usize) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table with at least enough capacity\n for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table with at least enough capacity","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20374,"byte_end":20445,"line_start":409,"line_end":409,"column_start":5,"column_end":76}},{"value":"/ for inserting the given number of elements without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20450,"byte_end":20518,"line_start":410,"line_end":410,"column_start":5,"column_end":73}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20523,"byte_end":20546,"line_start":411,"line_end":411,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20837,"byte_end":20850,"line_start":418,"line_end":418,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T, Global>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20692,"byte_end":20766,"line_start":416,"line_end":416,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20771,"byte_end":20825,"line_start":417,"line_end":417,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21392,"byte_end":21398,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"new_in","qualname":"<RawTable<T, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory, using the\n given allocator.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory, using the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20987,"byte_end":21062,"line_start":424,"line_end":424,"column_start":5,"column_end":80}},{"value":"/ given allocator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21067,"byte_end":21087,"line_start":425,"line_end":425,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21092,"byte_end":21095,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21100,"byte_end":21172,"line_start":427,"line_end":427,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21177,"byte_end":21250,"line_start":428,"line_end":428,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21255,"byte_end":21331,"line_start":429,"line_end":429,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":21372,"byte_end":21378,"line_start":430,"line_end":430,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":22941,"byte_end":22961,"line_start":481,"line_end":481,"column_start":12,"column_end":32},"name":"try_with_capacity_in","qualname":"<RawTable<T, A>>::try_with_capacity_in","value":"pub fn try_with_capacity_in(usize, A) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table using the given allocator, with at least enough\n capacity for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table using the given allocator, with at least enough","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":22730,"byte_end":22819,"line_start":478,"line_end":478,"column_start":5,"column_end":94}},{"value":"/ capacity for inserting the given number of elements without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":22824,"byte_end":22901,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":22906,"byte_end":22929,"line_start":480,"line_end":480,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23284,"byte_end":23300,"line_start":487,"line_end":487,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<RawTable<T, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table using the given allocator, with at least enough capacity for\n inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table using the given allocator, with at least enough capacity for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23112,"byte_end":23203,"line_start":485,"line_end":485,"column_start":5,"column_end":96}},{"value":"/ inserting the given number of elements without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23208,"byte_end":23272,"line_start":486,"line_end":486,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23957,"byte_end":23965,"line_start":503,"line_end":503,"column_start":19,"column_end":27},"name":"data_end","qualname":"<RawTable<T, A>>::data_end","value":"pub unsafe fn data_end(&Self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns pointer to one past last element of data table.\n","sig":null,"attributes":[{"value":"/ Returns pointer to one past last element of data table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23830,"byte_end":23889,"line_start":501,"line_end":501,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":23930,"byte_end":23936,"line_start":502,"line_end":502,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24428,"byte_end":24440,"line_start":516,"line_end":516,"column_start":19,"column_end":31},"name":"bucket_index","qualname":"<RawTable<T, A>>::bucket_index","value":"pub unsafe fn bucket_index(&Self, &Bucket<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of a bucket from a `Bucket`.\n","sig":null,"attributes":[{"value":"/ Returns the index of a bucket from a `Bucket`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24310,"byte_end":24360,"line_start":514,"line_end":514,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24401,"byte_end":24407,"line_start":515,"line_end":515,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24653,"byte_end":24659,"line_start":522,"line_end":522,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T, A>>::bucket","value":"pub unsafe fn bucket(&Self, usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24536,"byte_end":24585,"line_start":520,"line_end":520,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24626,"byte_end":24632,"line_start":521,"line_end":521,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25061,"byte_end":25074,"line_start":531,"line_end":531,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T, A>>::erase_no_drop","value":"pub unsafe fn erase_no_drop(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24863,"byte_end":24920,"line_start":528,"line_end":528,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24961,"byte_end":24967,"line_start":529,"line_end":529,"column_start":41,"column_end":47}},{"value":"deprecated(since = \"0.8.1\", note = \"use erase or remove instead\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":24974,"byte_end":25042,"line_start":530,"line_end":530,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25391,"byte_end":25396,"line_start":540,"line_end":540,"column_start":19,"column_end":24},"name":"erase","qualname":"<RawTable<T, A>>::erase","value":"pub unsafe fn erase(&mut Self, Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table, dropping it in place.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table, dropping it in place.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25194,"byte_end":25253,"line_start":536,"line_end":536,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25294,"byte_end":25300,"line_start":537,"line_end":537,"column_start":41,"column_end":47}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25307,"byte_end":25347,"line_start":538,"line_end":538,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25352,"byte_end":25372,"line_start":539,"line_end":539,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25772,"byte_end":25783,"line_start":550,"line_end":550,"column_start":12,"column_end":23},"name":"erase_entry","qualname":"<RawTable<T, A>>::erase_entry","value":"pub fn erase_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Finds and erases an element from the table, dropping it in place.\n Returns true if an element was found.\n","sig":null,"attributes":[{"value":"/ Finds and erases an element from the table, dropping it in place.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25568,"byte_end":25637,"line_start":546,"line_end":546,"column_start":5,"column_end":74}},{"value":"/ Returns true if an element was found.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25642,"byte_end":25683,"line_start":547,"line_end":547,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25688,"byte_end":25711,"line_start":548,"line_end":548,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":25752,"byte_end":25758,"line_start":549,"line_end":549,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26260,"byte_end":26266,"line_start":564,"line_end":564,"column_start":19,"column_end":25},"name":"remove","qualname":"<RawTable<T, A>>::remove","value":"pub unsafe fn remove(&mut Self, Bucket<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Removes an element from the table, returning it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26070,"byte_end":26122,"line_start":560,"line_end":560,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26163,"byte_end":26169,"line_start":561,"line_end":561,"column_start":41,"column_end":47}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26176,"byte_end":26216,"line_start":562,"line_end":562,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26221,"byte_end":26241,"line_start":563,"line_end":563,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26491,"byte_end":26503,"line_start":571,"line_end":571,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawTable<T, A>>::remove_entry","value":"pub fn remove_entry<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Finds and removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Finds and removes an element from the table, returning it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26368,"byte_end":26430,"line_start":569,"line_end":569,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26471,"byte_end":26477,"line_start":570,"line_end":570,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26906,"byte_end":26919,"line_start":581,"line_end":581,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T, A>>::clear_no_drop","value":"pub fn clear_no_drop(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26776,"byte_end":26845,"line_start":579,"line_end":579,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26886,"byte_end":26892,"line_start":580,"line_end":580,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":27115,"byte_end":27120,"line_start":587,"line_end":587,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":26979,"byte_end":27054,"line_start":585,"line_end":585,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":27095,"byte_end":27101,"line_start":586,"line_end":586,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":27669,"byte_end":27678,"line_start":605,"line_end":605,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T, A>>::shrink_to","value":"pub fn shrink_to<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":27542,"byte_end":27608,"line_start":603,"line_end":603,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":27649,"byte_end":27655,"line_start":604,"line_end":604,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29205,"byte_end":29212,"line_start":643,"line_end":643,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T, A>>::reserve","value":"pub fn reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29039,"byte_end":29114,"line_start":640,"line_end":640,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29119,"byte_end":29144,"line_start":641,"line_end":641,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29185,"byte_end":29191,"line_start":642,"line_end":642,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29798,"byte_end":29809,"line_start":658,"line_end":658,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T, A>>::try_reserve","value":"pub fn try_reserve<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, usize, impl Fn(&T) -> u64) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29624,"byte_end":29697,"line_start":655,"line_end":655,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29702,"byte_end":29737,"line_start":656,"line_end":656,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":29778,"byte_end":29784,"line_start":657,"line_end":657,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":36478,"byte_end":36484,"line_start":818,"line_end":818,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T, A>>::insert","value":"pub fn insert<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns its raw bucket.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns its raw bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":36262,"byte_end":36331,"line_start":814,"line_end":814,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":36336,"byte_end":36339,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":36344,"byte_end":36417,"line_start":816,"line_end":816,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":36458,"byte_end":36464,"line_start":817,"line_end":817,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37683,"byte_end":37701,"line_start":847,"line_end":847,"column_start":12,"column_end":30},"name":"try_insert_no_grow","qualname":"<RawTable<T, A>>::try_insert_no_grow","value":"pub fn try_insert_no_grow(&mut Self, u64, T) -> Result<Bucket<T>, T>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to insert a new element without growing the table and return its raw bucket.","sig":null,"attributes":[{"value":"/ Attempts to insert a new element without growing the table and return its raw bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37300,"byte_end":37389,"line_start":839,"line_end":839,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37394,"byte_end":37397,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err` containing the given element if inserting it would require growing the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37402,"byte_end":37493,"line_start":841,"line_end":841,"column_start":5,"column_end":96}},{"value":"/ table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37498,"byte_end":37508,"line_start":842,"line_end":842,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37513,"byte_end":37516,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37521,"byte_end":37594,"line_start":844,"line_end":844,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37599,"byte_end":37622,"line_start":845,"line_end":845,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":37663,"byte_end":37669,"line_start":846,"line_end":846,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38312,"byte_end":38324,"line_start":864,"line_end":864,"column_start":12,"column_end":24},"name":"insert_entry","qualname":"<RawTable<T, A>>::insert_entry","value":"pub fn insert_entry<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, u64, T, impl Fn(&T) -> u64) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, and returns a mutable reference to it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38085,"byte_end":38165,"line_start":860,"line_end":860,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38170,"byte_end":38173,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38178,"byte_end":38251,"line_start":862,"line_end":862,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38292,"byte_end":38298,"line_start":863,"line_end":863,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38832,"byte_end":38846,"line_start":875,"line_end":875,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T, A>>::insert_no_grow","value":"pub fn insert_no_grow(&mut Self, u64, T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38469,"byte_end":38537,"line_start":868,"line_end":868,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38542,"byte_end":38545,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38550,"byte_end":38620,"line_start":870,"line_end":870,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38625,"byte_end":38628,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38633,"byte_end":38706,"line_start":872,"line_end":872,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38747,"byte_end":38753,"line_start":873,"line_end":873,"column_start":41,"column_end":47}},{"value":"cfg(any(feature = \"raw\", feature = \"rustc-internal-api\"))","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":38760,"byte_end":38820,"line_start":874,"line_end":874,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39704,"byte_end":39723,"line_start":897,"line_end":897,"column_start":19,"column_end":38},"name":"replace_bucket_with","qualname":"<RawTable<T, A>>::replace_bucket_with","value":"pub unsafe fn replace_bucket_with<F>(&mut Self, Bucket<T>, F) -> bool where\nF: FnOnce(T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Temporary removes a bucket, applying the given function to the removed\n element and optionally put back the returned value in the same bucket.","sig":null,"attributes":[{"value":"/ Temporary removes a bucket, applying the given function to the removed","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39334,"byte_end":39408,"line_start":890,"line_end":890,"column_start":5,"column_end":79}},{"value":"/ element and optionally put back the returned value in the same bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39413,"byte_end":39487,"line_start":891,"line_end":891,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39492,"byte_end":39495,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if the bucket still contains an element","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39500,"byte_end":39558,"line_start":893,"line_end":893,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39563,"byte_end":39566,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given bucket is actually occupied.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39571,"byte_end":39636,"line_start":895,"line_end":895,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":39677,"byte_end":39683,"line_start":896,"line_end":896,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40423,"byte_end":40427,"line_start":919,"line_end":919,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T, A>>::find","value":"pub fn find<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40356,"byte_end":40397,"line_start":917,"line_end":917,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40402,"byte_end":40411,"line_start":918,"line_end":918,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40832,"byte_end":40835,"line_start":933,"line_end":933,"column_start":12,"column_end":15},"name":"get","qualname":"<RawTable<T, A>>::get","value":"pub fn get<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&Self, u64, impl FnMut(&T) -> bool) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a reference to an element in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40758,"byte_end":40806,"line_start":931,"line_end":931,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":40811,"byte_end":40820,"line_start":932,"line_end":932,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":41183,"byte_end":41190,"line_start":943,"line_end":943,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawTable<T, A>>::get_mut","value":"pub fn get_mut<impl FnMut(&T) -> bool: FnMut(&T) ->\nbool>(&mut Self, u64, impl FnMut(&T) -> bool) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to an element in the table.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to an element in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":41101,"byte_end":41157,"line_start":941,"line_end":941,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":41162,"byte_end":41171,"line_start":942,"line_end":942,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44591,"byte_end":44599,"line_start":1014,"line_end":1014,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44308,"byte_end":44381,"line_start":1009,"line_end":1009,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44386,"byte_end":44389,"line_start":1010,"line_end":1010,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44394,"byte_end":44459,"line_start":1011,"line_end":1011,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44464,"byte_end":44530,"line_start":1012,"line_end":1012,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44571,"byte_end":44577,"line_start":1013,"line_end":1013,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44788,"byte_end":44791,"line_start":1020,"line_end":1020,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44679,"byte_end":44727,"line_start":1018,"line_end":1018,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44768,"byte_end":44774,"line_start":1019,"line_end":1019,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44954,"byte_end":44961,"line_start":1026,"line_end":1026,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T, A>>::buckets","value":"pub fn buckets(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44846,"byte_end":44893,"line_start":1024,"line_end":1024,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":44934,"byte_end":44940,"line_start":1025,"line_end":1025,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45366,"byte_end":45370,"line_start":1035,"line_end":1035,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T, A>>::iter","value":"pub unsafe fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45026,"byte_end":45094,"line_start":1030,"line_end":1030,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45099,"byte_end":45167,"line_start":1031,"line_end":1031,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45172,"byte_end":45240,"line_start":1032,"line_end":1032,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45245,"byte_end":45298,"line_start":1033,"line_end":1033,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45339,"byte_end":45345,"line_start":1034,"line_end":1034,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46093,"byte_end":46102,"line_start":1051,"line_end":1051,"column_start":19,"column_end":28},"name":"iter_hash","qualname":"<RawTable<T, A>>::iter_hash","value":"pub unsafe fn iter_hash(&Self, u64) -> RawIterHash<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Returns an iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45625,"byte_end":45701,"line_start":1043,"line_end":1043,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45706,"byte_end":45709,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45714,"byte_end":45788,"line_start":1045,"line_end":1045,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45793,"byte_end":45796,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45801,"byte_end":45870,"line_start":1047,"line_end":1047,"column_start":5,"column_end":74}},{"value":"/ `RawIterHash`. Because we cannot make the `next` method unsafe on the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45875,"byte_end":45948,"line_start":1048,"line_end":1048,"column_start":5,"column_end":78}},{"value":"/ `RawIterHash` struct, we have to make the `iter_hash` method unsafe.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":45953,"byte_end":46025,"line_start":1049,"line_end":1049,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46066,"byte_end":46072,"line_start":1050,"line_end":1050,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46358,"byte_end":46363,"line_start":1058,"line_end":1058,"column_start":12,"column_end":17},"name":"drain","qualname":"<RawTable<T, A>>::drain","value":"pub fn drain(&mut Self) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.\n","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46196,"byte_end":46269,"line_start":1055,"line_end":1055,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46274,"byte_end":46297,"line_start":1056,"line_end":1056,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46338,"byte_end":46344,"line_start":1057,"line_end":1057,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46910,"byte_end":46925,"line_start":1073,"line_end":1073,"column_start":19,"column_end":34},"name":"drain_iter_from","qualname":"<RawTable<T, A>>::drain_iter_from","value":"pub unsafe fn drain_iter_from(&mut Self, RawIter<T>) -> RawDrain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46512,"byte_end":46585,"line_start":1065,"line_end":1065,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46590,"byte_end":46613,"line_start":1066,"line_end":1066,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46618,"byte_end":46621,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46626,"byte_end":46691,"line_start":1068,"line_end":1068,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46696,"byte_end":46699,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46704,"byte_end":46776,"line_start":1070,"line_end":1070,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46781,"byte_end":46842,"line_start":1071,"line_end":1071,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":46883,"byte_end":46889,"line_start":1072,"line_end":1072,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47578,"byte_end":47592,"line_start":1089,"line_end":1089,"column_start":19,"column_end":33},"name":"into_iter_from","qualname":"<RawTable<T, A>>::into_iter_from","value":"pub unsafe fn into_iter_from(Self, RawIter<T>) -> RawIntoIter<T, A>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which consumes all elements from the table.","sig":null,"attributes":[{"value":"/ Returns an iterator which consumes all elements from the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47263,"byte_end":47330,"line_start":1083,"line_end":1083,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47335,"byte_end":47338,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47343,"byte_end":47408,"line_start":1085,"line_end":1085,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47413,"byte_end":47416,"line_start":1086,"line_end":1086,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the iterator is valid for this","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47421,"byte_end":47493,"line_start":1087,"line_end":1087,"column_start":5,"column_end":77}},{"value":"/ `RawTable` and covers all items that remain in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":47498,"byte_end":47559,"line_start":1088,"line_end":1088,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":66929,"byte_end":66951,"line_start":1609,"line_end":1609,"column_start":12,"column_end":34},"name":"clone_from_with_hasher","qualname":"<RawTable<T, A>>::clone_from_with_hasher","value":"pub fn clone_from_with_hasher<impl Fn(&T) -> u64: Fn(&T) ->\nu64>(&mut Self, &Self, impl Fn(&T) -> u64)","parent":null,"children":[],"decl_id":null,"docs":" Variant of `clone_from` to use when a hasher is available.\n","sig":null,"attributes":[{"value":"/ Variant of `clone_from` to use when a hasher is available.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":66827,"byte_end":66889,"line_start":1607,"line_end":1607,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":66894,"byte_end":66917,"line_start":1608,"line_end":1608,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":350},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75969,"byte_end":75976,"line_start":1851,"line_end":1851,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::inner::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75162,"byte_end":75237,"line_start":1839,"line_end":1839,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75238,"byte_end":75241,"line_start":1840,"line_end":1840,"column_start":1,"column_end":4}},{"value":"/ For maximum flexibility this iterator is not bound by a lifetime, but you","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75242,"byte_end":75319,"line_start":1841,"line_end":1841,"column_start":1,"column_end":78}},{"value":"/ must observe several rules when using it:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75320,"byte_end":75365,"line_start":1842,"line_end":1842,"column_start":1,"column_end":46}},{"value":"/ - You must not free the hash table while iterating (including via growing/shrinking).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75366,"byte_end":75455,"line_start":1843,"line_end":1843,"column_start":1,"column_end":90}},{"value":"/ - It is fine to erase a bucket that has been yielded by the iterator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75456,"byte_end":75529,"line_start":1844,"line_end":1844,"column_start":1,"column_end":74}},{"value":"/ - Erasing a bucket that has not yet been yielded by the iterator may still","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75530,"byte_end":75608,"line_start":1845,"line_end":1845,"column_start":1,"column_end":79}},{"value":"/   result in the iterator yielding that bucket (unless `reflect_remove` is called).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75609,"byte_end":75695,"line_start":1846,"line_end":1846,"column_start":1,"column_end":87}},{"value":"/ - It is unspecified whether an element inserted after the iterator was","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75696,"byte_end":75770,"line_start":1847,"line_end":1847,"column_start":1,"column_end":75}},{"value":"/   created will be yielded by that iterator (unless `reflect_insert` is called).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75771,"byte_end":75854,"line_start":1848,"line_end":1848,"column_start":1,"column_end":84}},{"value":"/ - The order in which the iterator yields bucket is unspecified and may","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75855,"byte_end":75929,"line_start":1849,"line_end":1849,"column_start":1,"column_end":75}},{"value":"/   change in the future.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75930,"byte_end":75957,"line_start":1850,"line_end":1850,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76519,"byte_end":76533,"line_start":1865,"line_end":1865,"column_start":12,"column_end":26},"name":"reflect_remove","qualname":"<RawIter<T>>::reflect_remove","value":"pub fn reflect_remove(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects a removal from the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects a removal from the given bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76066,"byte_end":76143,"line_start":1857,"line_end":1857,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76148,"byte_end":76151,"line_start":1858,"line_end":1858,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76156,"byte_end":76225,"line_start":1859,"line_end":1859,"column_start":5,"column_end":74}},{"value":"/ for each removed bucket before `next` is called again.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76230,"byte_end":76288,"line_start":1860,"line_end":1860,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76293,"byte_end":76296,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ This method should be called _before_ the removal is made. It is not necessary to call this","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76301,"byte_end":76396,"line_start":1862,"line_end":1862,"column_start":5,"column_end":100}},{"value":"/ method if you are removing an item that this iterator yielded in the past.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76401,"byte_end":76479,"line_start":1863,"line_end":1863,"column_start":5,"column_end":83}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76484,"byte_end":76507,"line_start":1864,"line_end":1864,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":77119,"byte_end":77133,"line_start":1879,"line_end":1879,"column_start":12,"column_end":26},"name":"reflect_insert","qualname":"<RawIter<T>>::reflect_insert","value":"pub fn reflect_insert(&mut Self, &Bucket<T>)","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects an insertion into the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects an insertion into the given bucket.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76617,"byte_end":76697,"line_start":1869,"line_end":1869,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76702,"byte_end":76705,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76710,"byte_end":76779,"line_start":1871,"line_end":1871,"column_start":5,"column_end":74}},{"value":"/ for each insert before `next` is called again.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76784,"byte_end":76834,"line_start":1872,"line_end":1872,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76839,"byte_end":76842,"line_start":1873,"line_end":1873,"column_start":5,"column_end":8}},{"value":"/ This method does not guarantee that an insertion of a bucket witha greater","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76847,"byte_end":76925,"line_start":1874,"line_end":1874,"column_start":5,"column_end":83}},{"value":"/ index than the last one yielded will be reflected in the iterator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76930,"byte_end":77000,"line_start":1875,"line_end":1875,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":77005,"byte_end":77008,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ This method should be called _after_ the given insert is made.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":77013,"byte_end":77079,"line_start":1877,"line_end":1877,"column_start":5,"column_end":71}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":77084,"byte_end":77107,"line_start":1878,"line_end":1878,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":372},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83213,"byte_end":83224,"line_start":2019,"line_end":2019,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::inner::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83144,"byte_end":83201,"line_start":2018,"line_end":2018,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83485,"byte_end":83489,"line_start":2028,"line_end":2028,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T, A>>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83465,"byte_end":83471,"line_start":2027,"line_end":2027,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85199,"byte_end":85207,"line_start":2085,"line_end":2085,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::inner::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85116,"byte_end":85187,"line_start":2084,"line_end":2084,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85791,"byte_end":85795,"line_start":2101,"line_end":2101,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"pub fn iter(&Self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85771,"byte_end":85777,"line_start":2100,"line_end":2100,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87344,"byte_end":87355,"line_start":2151,"line_end":2151,"column_start":12,"column_end":23},"name":"RawIterHash","qualname":"::raw::inner::RawIterHash","value":"RawIterHash {  }","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87188,"byte_end":87253,"line_start":2148,"line_end":2148,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87254,"byte_end":87257,"line_start":2149,"line_end":2149,"column_start":1,"column_end":4}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87258,"byte_end":87332,"line_start":2150,"line_end":2150,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":687},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103378,"byte_end":103396,"line_start":17,"line_end":17,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"ahash::RandomState","parent":null,"children":[],"decl_id":null,"docs":" Default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Default hasher for `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103309,"byte_end":103342,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"cfg(feature = \"ahash\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103343,"byte_end":103368,"line_start":16,"line_end":16,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109789,"byte_end":109796,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":694}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103523,"byte_end":103589,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103590,"byte_end":103593,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103594,"byte_end":103666,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103667,"byte_end":103743,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103744,"byte_end":103823,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103824,"byte_end":103860,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103861,"byte_end":103864,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103865,"byte_end":103941,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":103942,"byte_end":104022,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104023,"byte_end":104104,"line_start":32,"line_end":32,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104105,"byte_end":104108,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104109,"byte_end":104192,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104193,"byte_end":104271,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104272,"byte_end":104343,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104344,"byte_end":104363,"line_start":37,"line_end":37,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104364,"byte_end":104367,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104368,"byte_end":104379,"line_start":39,"line_end":39,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104380,"byte_end":104416,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104417,"byte_end":104424,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104425,"byte_end":104428,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104429,"byte_end":104499,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104500,"byte_end":104503,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104504,"byte_end":104581,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104582,"byte_end":104662,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104663,"byte_end":104738,"line_start":47,"line_end":47,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104739,"byte_end":104817,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104818,"byte_end":104821,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104822,"byte_end":104901,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104902,"byte_end":104980,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":104981,"byte_end":105061,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105062,"byte_end":105107,"line_start":53,"line_end":53,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105108,"byte_end":105111,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105112,"byte_end":105126,"line_start":55,"line_end":55,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105127,"byte_end":105130,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105131,"byte_end":105138,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105139,"byte_end":105166,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105167,"byte_end":105170,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105171,"byte_end":105239,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105240,"byte_end":105299,"line_start":61,"line_end":61,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105300,"byte_end":105342,"line_start":62,"line_end":62,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105343,"byte_end":105346,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105347,"byte_end":105372,"line_start":64,"line_end":64,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105373,"byte_end":105397,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105398,"byte_end":105451,"line_start":66,"line_end":66,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105452,"byte_end":105492,"line_start":67,"line_end":67,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105493,"byte_end":105499,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105500,"byte_end":105524,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105525,"byte_end":105567,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105568,"byte_end":105603,"line_start":71,"line_end":71,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105604,"byte_end":105610,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105611,"byte_end":105635,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105636,"byte_end":105678,"line_start":74,"line_end":74,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105679,"byte_end":105717,"line_start":75,"line_end":75,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105718,"byte_end":105724,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105725,"byte_end":105749,"line_start":77,"line_end":77,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105750,"byte_end":105806,"line_start":78,"line_end":78,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105807,"byte_end":105848,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105849,"byte_end":105855,"line_start":80,"line_end":80,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105856,"byte_end":105859,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105860,"byte_end":105892,"line_start":82,"line_end":82,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105893,"byte_end":105963,"line_start":83,"line_end":83,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":105964,"byte_end":106003,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106004,"byte_end":106058,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106059,"byte_end":106131,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106132,"byte_end":106169,"line_start":87,"line_end":87,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106170,"byte_end":106175,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106176,"byte_end":106179,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106180,"byte_end":106253,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106254,"byte_end":106315,"line_start":91,"line_end":91,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106316,"byte_end":106319,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106320,"byte_end":106372,"line_start":93,"line_end":93,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106373,"byte_end":106450,"line_start":94,"line_end":94,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106451,"byte_end":106478,"line_start":95,"line_end":95,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106479,"byte_end":106517,"line_start":96,"line_end":96,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106518,"byte_end":106579,"line_start":97,"line_end":97,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106580,"byte_end":106635,"line_start":98,"line_end":98,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106636,"byte_end":106645,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106646,"byte_end":106651,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106652,"byte_end":106655,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106656,"byte_end":106728,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106729,"byte_end":106802,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106803,"byte_end":106806,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106807,"byte_end":106838,"line_start":105,"line_end":105,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106839,"byte_end":106880,"line_start":106,"line_end":106,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106881,"byte_end":106926,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106927,"byte_end":106932,"line_start":108,"line_end":108,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106933,"byte_end":106940,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106941,"byte_end":106944,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":106945,"byte_end":107020,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107021,"byte_end":107101,"line_start":112,"line_end":112,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107102,"byte_end":107119,"line_start":113,"line_end":113,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107120,"byte_end":107123,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107124,"byte_end":107131,"line_start":115,"line_end":115,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107132,"byte_end":107159,"line_start":116,"line_end":116,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107160,"byte_end":107163,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107164,"byte_end":107232,"line_start":118,"line_end":118,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107233,"byte_end":107286,"line_start":119,"line_end":119,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107287,"byte_end":107329,"line_start":120,"line_end":120,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107330,"byte_end":107333,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107334,"byte_end":107367,"line_start":122,"line_end":122,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107368,"byte_end":107443,"line_start":123,"line_end":123,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107444,"byte_end":107479,"line_start":124,"line_end":124,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107480,"byte_end":107490,"line_start":125,"line_end":125,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107491,"byte_end":107496,"line_start":126,"line_end":126,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107497,"byte_end":107500,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107501,"byte_end":107553,"line_start":128,"line_end":128,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107554,"byte_end":107602,"line_start":129,"line_end":129,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107603,"byte_end":107606,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107607,"byte_end":107680,"line_start":131,"line_end":131,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107681,"byte_end":107709,"line_start":132,"line_end":132,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107710,"byte_end":107777,"line_start":133,"line_end":133,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107778,"byte_end":107781,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107782,"byte_end":107850,"line_start":135,"line_end":135,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107851,"byte_end":107910,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107911,"byte_end":107943,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107944,"byte_end":107951,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107952,"byte_end":107955,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":107956,"byte_end":108049,"line_start":140,"line_end":140,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108050,"byte_end":108088,"line_start":141,"line_end":141,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108089,"byte_end":108092,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108093,"byte_end":108152,"line_start":143,"line_end":143,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108153,"byte_end":108217,"line_start":144,"line_end":144,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108218,"byte_end":108291,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108292,"byte_end":108363,"line_start":146,"line_end":146,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108364,"byte_end":108429,"line_start":147,"line_end":147,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108430,"byte_end":108462,"line_start":148,"line_end":148,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108463,"byte_end":108503,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108504,"byte_end":108570,"line_start":150,"line_end":150,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108571,"byte_end":108612,"line_start":151,"line_end":151,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108613,"byte_end":108658,"line_start":152,"line_end":152,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108659,"byte_end":108662,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108663,"byte_end":108670,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108671,"byte_end":108698,"line_start":155,"line_end":155,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108699,"byte_end":108702,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108703,"byte_end":108744,"line_start":157,"line_end":157,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108745,"byte_end":108764,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108765,"byte_end":108786,"line_start":159,"line_end":159,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108787,"byte_end":108811,"line_start":160,"line_end":160,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108812,"byte_end":108817,"line_start":161,"line_end":161,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108818,"byte_end":108821,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108822,"byte_end":108839,"line_start":163,"line_end":163,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108840,"byte_end":108873,"line_start":164,"line_end":164,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108874,"byte_end":108927,"line_start":165,"line_end":165,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":108928,"byte_end":109003,"line_start":166,"line_end":166,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109004,"byte_end":109013,"line_start":167,"line_end":167,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109014,"byte_end":109019,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109020,"byte_end":109023,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109024,"byte_end":109081,"line_start":170,"line_end":170,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109082,"byte_end":109119,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109120,"byte_end":109123,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109124,"byte_end":109179,"line_start":173,"line_end":173,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109180,"byte_end":109235,"line_start":174,"line_end":174,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109236,"byte_end":109293,"line_start":175,"line_end":175,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109294,"byte_end":109297,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109298,"byte_end":109367,"line_start":177,"line_end":177,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109368,"byte_end":109406,"line_start":178,"line_end":178,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109407,"byte_end":109458,"line_start":179,"line_end":179,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109459,"byte_end":109464,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109465,"byte_end":109472,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109473,"byte_end":109476,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109477,"byte_end":109554,"line_start":183,"line_end":183,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109555,"byte_end":109558,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109559,"byte_end":109566,"line_start":185,"line_end":185,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109567,"byte_end":109594,"line_start":186,"line_end":186,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109595,"byte_end":109598,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109599,"byte_end":109697,"line_start":188,"line_end":188,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109698,"byte_end":109733,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109734,"byte_end":109769,"line_start":190,"line_end":190,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":109770,"byte_end":109777,"line_start":191,"line_end":191,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112590,"byte_end":112593,"line_start":286,"line_end":286,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112212,"byte_end":112243,"line_start":274,"line_end":274,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112248,"byte_end":112251,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112256,"byte_end":112348,"line_start":276,"line_end":276,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112353,"byte_end":112380,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112385,"byte_end":112388,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112393,"byte_end":112407,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112412,"byte_end":112415,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112420,"byte_end":112427,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112432,"byte_end":112459,"line_start":282,"line_end":282,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112464,"byte_end":112517,"line_start":283,"line_end":283,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112522,"byte_end":112529,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112570,"byte_end":112576,"line_start":285,"line_end":285,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113083,"byte_end":113096,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112641,"byte_end":112700,"line_start":290,"line_end":290,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112705,"byte_end":112708,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112713,"byte_end":112787,"line_start":292,"line_end":292,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112792,"byte_end":112861,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112866,"byte_end":112869,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112874,"byte_end":112888,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112893,"byte_end":112896,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112901,"byte_end":112908,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112913,"byte_end":112940,"line_start":298,"line_end":298,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::with_capacity(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112945,"byte_end":113010,"line_start":299,"line_end":299,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113015,"byte_end":113022,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113063,"byte_end":113069,"line_start":301,"line_end":301,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113570,"byte_end":113576,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"new_in","qualname":"<HashMap<K, V, DefaultHashBuilder, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` using the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` using the given allocator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113315,"byte_end":113372,"line_start":309,"line_end":309,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113377,"byte_end":113380,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ The hash map is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113385,"byte_end":113477,"line_start":311,"line_end":311,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113482,"byte_end":113509,"line_start":312,"line_end":312,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113550,"byte_end":113556,"line_start":313,"line_end":313,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113982,"byte_end":113998,"line_start":323,"line_end":323,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<HashMap<K, V, DefaultHashBuilder, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity using the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity using the given allocator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113675,"byte_end":113760,"line_start":318,"line_end":318,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113765,"byte_end":113768,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113773,"byte_end":113847,"line_start":320,"line_end":320,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113852,"byte_end":113921,"line_start":321,"line_end":321,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113962,"byte_end":113968,"line_start":322,"line_end":322,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115179,"byte_end":115190,"line_start":355,"line_end":355,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114172,"byte_end":114248,"line_start":329,"line_end":329,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114253,"byte_end":114262,"line_start":330,"line_end":330,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114267,"byte_end":114270,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114275,"byte_end":114328,"line_start":332,"line_end":332,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114333,"byte_end":114336,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114341,"byte_end":114404,"line_start":334,"line_end":334,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114409,"byte_end":114474,"line_start":335,"line_end":335,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114479,"byte_end":114542,"line_start":336,"line_end":336,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114547,"byte_end":114611,"line_start":337,"line_end":337,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114616,"byte_end":114619,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114624,"byte_end":114700,"line_start":339,"line_end":339,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114705,"byte_end":114769,"line_start":340,"line_end":340,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114774,"byte_end":114777,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114782,"byte_end":114796,"line_start":342,"line_end":342,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114801,"byte_end":114804,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114809,"byte_end":114816,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114821,"byte_end":114848,"line_start":345,"line_end":345,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114853,"byte_end":114901,"line_start":346,"line_end":346,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114906,"byte_end":114909,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114914,"byte_end":114956,"line_start":348,"line_end":348,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114961,"byte_end":115003,"line_start":349,"line_end":349,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115008,"byte_end":115029,"line_start":350,"line_end":350,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115034,"byte_end":115041,"line_start":351,"line_end":351,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115046,"byte_end":115049,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115054,"byte_end":115112,"line_start":353,"line_end":353,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115153,"byte_end":115159,"line_start":354,"line_end":354,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116445,"byte_end":116469,"line_start":389,"line_end":389,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115316,"byte_end":115396,"line_start":362,"line_end":362,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115401,"byte_end":115422,"line_start":363,"line_end":363,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115427,"byte_end":115430,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115435,"byte_end":115509,"line_start":365,"line_end":365,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115514,"byte_end":115583,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115588,"byte_end":115591,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115596,"byte_end":115659,"line_start":368,"line_end":368,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115664,"byte_end":115729,"line_start":369,"line_end":369,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115734,"byte_end":115797,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115802,"byte_end":115866,"line_start":371,"line_end":371,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115871,"byte_end":115874,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115879,"byte_end":115955,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":115960,"byte_end":116024,"line_start":374,"line_end":374,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116029,"byte_end":116032,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116037,"byte_end":116051,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116056,"byte_end":116059,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116064,"byte_end":116071,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116076,"byte_end":116103,"line_start":379,"line_end":379,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116108,"byte_end":116156,"line_start":380,"line_end":380,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116161,"byte_end":116164,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116169,"byte_end":116211,"line_start":382,"line_end":382,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116216,"byte_end":116275,"line_start":383,"line_end":383,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116280,"byte_end":116301,"line_start":384,"line_end":384,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116306,"byte_end":116313,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116318,"byte_end":116321,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116326,"byte_end":116384,"line_start":387,"line_end":387,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116425,"byte_end":116431,"line_start":388,"line_end":388,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117509,"byte_end":117523,"line_start":419,"line_end":419,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116690,"byte_end":116766,"line_start":398,"line_end":398,"column_start":5,"column_end":81}},{"value":"/ keys. It will be allocated with the given allocator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116771,"byte_end":116827,"line_start":399,"line_end":399,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116832,"byte_end":116835,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116840,"byte_end":116893,"line_start":401,"line_end":401,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116898,"byte_end":116901,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116906,"byte_end":116969,"line_start":403,"line_end":403,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116974,"byte_end":117039,"line_start":404,"line_end":404,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117044,"byte_end":117107,"line_start":405,"line_end":405,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117112,"byte_end":117176,"line_start":406,"line_end":406,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117181,"byte_end":117184,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117189,"byte_end":117203,"line_start":408,"line_end":408,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117208,"byte_end":117211,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117216,"byte_end":117223,"line_start":410,"line_end":410,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117228,"byte_end":117255,"line_start":411,"line_end":411,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117260,"byte_end":117308,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117313,"byte_end":117316,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117321,"byte_end":117363,"line_start":414,"line_end":414,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117368,"byte_end":117410,"line_start":415,"line_end":415,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117415,"byte_end":117436,"line_start":416,"line_end":416,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117441,"byte_end":117448,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117489,"byte_end":117495,"line_start":418,"line_end":418,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118614,"byte_end":118641,"line_start":448,"line_end":448,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashMap<K, V, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys. It will be allocated with the given allocator.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117667,"byte_end":117747,"line_start":426,"line_end":426,"column_start":5,"column_end":85}},{"value":"/ to hash the keys. It will be allocated with the given allocator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117752,"byte_end":117820,"line_start":427,"line_end":427,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117825,"byte_end":117828,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117833,"byte_end":117907,"line_start":429,"line_end":429,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117912,"byte_end":117981,"line_start":430,"line_end":430,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117986,"byte_end":117989,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":117994,"byte_end":118057,"line_start":432,"line_end":432,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118062,"byte_end":118127,"line_start":433,"line_end":433,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118132,"byte_end":118195,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118200,"byte_end":118264,"line_start":435,"line_end":435,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118269,"byte_end":118272,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118277,"byte_end":118291,"line_start":437,"line_end":437,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118296,"byte_end":118299,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118304,"byte_end":118311,"line_start":439,"line_end":439,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118316,"byte_end":118343,"line_start":440,"line_end":440,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118348,"byte_end":118396,"line_start":441,"line_end":441,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118401,"byte_end":118404,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118409,"byte_end":118451,"line_start":443,"line_end":443,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118456,"byte_end":118515,"line_start":444,"line_end":444,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118520,"byte_end":118541,"line_start":445,"line_end":445,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118546,"byte_end":118553,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118594,"byte_end":118600,"line_start":447,"line_end":447,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119354,"byte_end":119360,"line_start":470,"line_end":470,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118822,"byte_end":118875,"line_start":455,"line_end":455,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118880,"byte_end":118883,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118888,"byte_end":118966,"line_start":457,"line_end":457,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118971,"byte_end":118974,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118979,"byte_end":118993,"line_start":459,"line_end":459,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":118998,"byte_end":119001,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119006,"byte_end":119013,"line_start":461,"line_end":461,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119018,"byte_end":119045,"line_start":462,"line_end":462,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119050,"byte_end":119098,"line_start":463,"line_end":463,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119103,"byte_end":119106,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119111,"byte_end":119158,"line_start":465,"line_end":465,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119163,"byte_end":119225,"line_start":466,"line_end":466,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119230,"byte_end":119281,"line_start":467,"line_end":467,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119286,"byte_end":119293,"line_start":468,"line_end":468,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119334,"byte_end":119340,"line_start":469,"line_end":469,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119904,"byte_end":119912,"line_start":487,"line_end":487,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119414,"byte_end":119487,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119492,"byte_end":119495,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119500,"byte_end":119575,"line_start":476,"line_end":476,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119580,"byte_end":119646,"line_start":477,"line_end":477,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119651,"byte_end":119654,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119659,"byte_end":119673,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119678,"byte_end":119681,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119686,"byte_end":119693,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119698,"byte_end":119725,"line_start":482,"line_end":482,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119730,"byte_end":119791,"line_start":483,"line_end":483,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119796,"byte_end":119831,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119836,"byte_end":119843,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119884,"byte_end":119890,"line_start":486,"line_end":486,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120436,"byte_end":120440,"line_start":509,"line_end":509,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S, A>>::keys","value":"pub fn keys(&Self) -> Keys<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":119972,"byte_end":120025,"line_start":491,"line_end":491,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120030,"byte_end":120071,"line_start":492,"line_end":492,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120076,"byte_end":120079,"line_start":493,"line_end":493,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120084,"byte_end":120098,"line_start":494,"line_end":494,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120103,"byte_end":120106,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120111,"byte_end":120118,"line_start":496,"line_end":496,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120123,"byte_end":120150,"line_start":497,"line_end":497,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120155,"byte_end":120158,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120163,"byte_end":120196,"line_start":499,"line_end":499,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120201,"byte_end":120224,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120229,"byte_end":120252,"line_start":501,"line_end":501,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120257,"byte_end":120280,"line_start":502,"line_end":502,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120285,"byte_end":120288,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120293,"byte_end":120320,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120325,"byte_end":120353,"line_start":505,"line_end":505,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120358,"byte_end":120363,"line_start":506,"line_end":506,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120368,"byte_end":120375,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120416,"byte_end":120422,"line_start":508,"line_end":508,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120983,"byte_end":120989,"line_start":531,"line_end":531,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S, A>>::values","value":"pub fn values(&Self) -> Values<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120515,"byte_end":120570,"line_start":513,"line_end":513,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120575,"byte_end":120616,"line_start":514,"line_end":514,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120621,"byte_end":120624,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120629,"byte_end":120643,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120648,"byte_end":120651,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120656,"byte_end":120663,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120668,"byte_end":120695,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120700,"byte_end":120703,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120708,"byte_end":120741,"line_start":521,"line_end":521,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120746,"byte_end":120769,"line_start":522,"line_end":522,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120774,"byte_end":120797,"line_start":523,"line_end":523,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120802,"byte_end":120825,"line_start":524,"line_end":524,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120830,"byte_end":120833,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120838,"byte_end":120867,"line_start":526,"line_end":526,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120872,"byte_end":120900,"line_start":527,"line_end":527,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120905,"byte_end":120910,"line_start":528,"line_end":528,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120915,"byte_end":120922,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":120963,"byte_end":120969,"line_start":530,"line_end":530,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121642,"byte_end":121652,"line_start":558,"line_end":558,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S, A>>::values_mut","value":"pub fn values_mut(&mut Self) -> ValuesMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121068,"byte_end":121131,"line_start":535,"line_end":535,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121136,"byte_end":121181,"line_start":536,"line_end":536,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121186,"byte_end":121189,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121194,"byte_end":121208,"line_start":538,"line_end":538,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121213,"byte_end":121216,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121221,"byte_end":121228,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121233,"byte_end":121260,"line_start":541,"line_end":541,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121265,"byte_end":121268,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121273,"byte_end":121306,"line_start":543,"line_end":543,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121311,"byte_end":121314,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121319,"byte_end":121342,"line_start":545,"line_end":545,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121347,"byte_end":121370,"line_start":546,"line_end":546,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121375,"byte_end":121398,"line_start":547,"line_end":547,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121403,"byte_end":121406,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121411,"byte_end":121444,"line_start":549,"line_end":549,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121449,"byte_end":121474,"line_start":550,"line_end":550,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121479,"byte_end":121484,"line_start":551,"line_end":551,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121489,"byte_end":121492,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121497,"byte_end":121526,"line_start":553,"line_end":553,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121531,"byte_end":121559,"line_start":554,"line_end":554,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121564,"byte_end":121569,"line_start":555,"line_end":555,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121574,"byte_end":121581,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121622,"byte_end":121628,"line_start":557,"line_end":557,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122275,"byte_end":122279,"line_start":582,"line_end":582,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121766,"byte_end":121830,"line_start":564,"line_end":564,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121835,"byte_end":121885,"line_start":565,"line_end":565,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121890,"byte_end":121893,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121898,"byte_end":121912,"line_start":567,"line_end":567,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121917,"byte_end":121920,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121925,"byte_end":121932,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121937,"byte_end":121964,"line_start":570,"line_end":570,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121969,"byte_end":121972,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":121977,"byte_end":122010,"line_start":572,"line_end":572,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122015,"byte_end":122038,"line_start":573,"line_end":573,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122043,"byte_end":122066,"line_start":574,"line_end":574,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122071,"byte_end":122094,"line_start":575,"line_end":575,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122099,"byte_end":122102,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122107,"byte_end":122141,"line_start":577,"line_end":577,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122146,"byte_end":122192,"line_start":578,"line_end":578,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122197,"byte_end":122202,"line_start":579,"line_end":579,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122207,"byte_end":122214,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122255,"byte_end":122261,"line_start":581,"line_end":581,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123179,"byte_end":123187,"line_start":616,"line_end":616,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S, A>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122514,"byte_end":122578,"line_start":592,"line_end":592,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122583,"byte_end":122625,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122630,"byte_end":122684,"line_start":594,"line_end":594,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122689,"byte_end":122692,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122697,"byte_end":122711,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122716,"byte_end":122719,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122724,"byte_end":122731,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122736,"byte_end":122763,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122768,"byte_end":122771,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122776,"byte_end":122809,"line_start":601,"line_end":601,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122814,"byte_end":122837,"line_start":602,"line_end":602,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122842,"byte_end":122865,"line_start":603,"line_end":603,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122870,"byte_end":122893,"line_start":604,"line_end":604,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122898,"byte_end":122901,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122906,"byte_end":122930,"line_start":606,"line_end":606,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122935,"byte_end":122971,"line_start":607,"line_end":607,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122976,"byte_end":122994,"line_start":608,"line_end":608,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":122999,"byte_end":123004,"line_start":609,"line_end":609,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123009,"byte_end":123012,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123017,"byte_end":123045,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123050,"byte_end":123096,"line_start":612,"line_end":612,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123101,"byte_end":123106,"line_start":613,"line_end":613,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123111,"byte_end":123118,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123159,"byte_end":123165,"line_start":615,"line_end":615,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123904,"byte_end":123907,"line_start":645,"line_end":645,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123572,"byte_end":123618,"line_start":632,"line_end":632,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123623,"byte_end":123626,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123631,"byte_end":123645,"line_start":634,"line_end":634,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123650,"byte_end":123653,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123658,"byte_end":123665,"line_start":636,"line_end":636,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123670,"byte_end":123697,"line_start":637,"line_end":637,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123702,"byte_end":123705,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123710,"byte_end":123741,"line_start":639,"line_end":639,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123746,"byte_end":123773,"line_start":640,"line_end":640,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123778,"byte_end":123799,"line_start":641,"line_end":641,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123804,"byte_end":123831,"line_start":642,"line_end":642,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123836,"byte_end":123843,"line_start":643,"line_end":643,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123884,"byte_end":123890,"line_start":644,"line_end":644,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124298,"byte_end":124306,"line_start":662,"line_end":662,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":123962,"byte_end":124013,"line_start":649,"line_end":649,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124018,"byte_end":124021,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124026,"byte_end":124040,"line_start":651,"line_end":651,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124045,"byte_end":124048,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124053,"byte_end":124060,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124065,"byte_end":124092,"line_start":654,"line_end":654,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124097,"byte_end":124100,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124105,"byte_end":124136,"line_start":656,"line_end":656,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124141,"byte_end":124167,"line_start":657,"line_end":657,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124172,"byte_end":124193,"line_start":658,"line_end":658,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124198,"byte_end":124225,"line_start":659,"line_end":659,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124230,"byte_end":124237,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124278,"byte_end":124284,"line_start":661,"line_end":661,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124899,"byte_end":124904,"line_start":686,"line_end":686,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, K, V, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124359,"byte_end":124434,"line_start":666,"line_end":666,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124439,"byte_end":124470,"line_start":667,"line_end":667,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124475,"byte_end":124478,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124483,"byte_end":124497,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124502,"byte_end":124505,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124510,"byte_end":124517,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124522,"byte_end":124549,"line_start":672,"line_end":672,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124554,"byte_end":124557,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124562,"byte_end":124593,"line_start":674,"line_end":674,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124598,"byte_end":124619,"line_start":675,"line_end":675,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124624,"byte_end":124645,"line_start":676,"line_end":676,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124650,"byte_end":124653,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124658,"byte_end":124695,"line_start":678,"line_end":678,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124700,"byte_end":124734,"line_start":679,"line_end":679,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124739,"byte_end":124777,"line_start":680,"line_end":680,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124782,"byte_end":124787,"line_start":681,"line_end":681,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124792,"byte_end":124795,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124800,"byte_end":124826,"line_start":683,"line_end":683,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124831,"byte_end":124838,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":124879,"byte_end":124885,"line_start":685,"line_end":685,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125435,"byte_end":125441,"line_start":705,"line_end":705,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125016,"byte_end":125073,"line_start":692,"line_end":692,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125078,"byte_end":125081,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125086,"byte_end":125173,"line_start":694,"line_end":694,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125178,"byte_end":125181,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125186,"byte_end":125200,"line_start":696,"line_end":696,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125205,"byte_end":125208,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125213,"byte_end":125220,"line_start":698,"line_end":698,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125225,"byte_end":125252,"line_start":699,"line_end":699,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125257,"byte_end":125260,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125265,"byte_end":125337,"line_start":701,"line_end":701,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125342,"byte_end":125377,"line_start":702,"line_end":702,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125382,"byte_end":125411,"line_start":703,"line_end":703,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125416,"byte_end":125423,"line_start":704,"line_end":704,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126857,"byte_end":126869,"line_start":746,"line_end":746,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, K, V, F, A> where\nF: FnMut(&K, &mut V) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125858,"byte_end":125919,"line_start":720,"line_end":720,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125924,"byte_end":125975,"line_start":721,"line_end":721,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125980,"byte_end":125983,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `true` out","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":125988,"byte_end":126075,"line_start":723,"line_end":723,"column_start":5,"column_end":92}},{"value":"/ into another iterator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126080,"byte_end":126106,"line_start":724,"line_end":724,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126111,"byte_end":126114,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126119,"byte_end":126202,"line_start":726,"line_end":726,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126207,"byte_end":126252,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126257,"byte_end":126260,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126265,"byte_end":126279,"line_start":729,"line_end":729,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126284,"byte_end":126287,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126292,"byte_end":126299,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126304,"byte_end":126331,"line_start":732,"line_end":732,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126336,"byte_end":126339,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126344,"byte_end":126414,"line_start":734,"line_end":734,"column_start":5,"column_end":75}},{"value":"/ let drained: HashMap<i32, i32> = map.drain_filter(|k, _v| k % 2 == 0).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126419,"byte_end":126503,"line_start":735,"line_end":735,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126508,"byte_end":126511,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126516,"byte_end":126580,"line_start":737,"line_end":737,"column_start":5,"column_end":69}},{"value":"/ let mut odds = map.keys().cloned().collect::<Vec<_>>();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126585,"byte_end":126644,"line_start":738,"line_end":738,"column_start":5,"column_end":64}},{"value":"/ evens.sort();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126649,"byte_end":126666,"line_start":739,"line_end":739,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126671,"byte_end":126687,"line_start":740,"line_end":740,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126692,"byte_end":126695,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126700,"byte_end":126740,"line_start":742,"line_end":742,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126745,"byte_end":126784,"line_start":743,"line_end":743,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126789,"byte_end":126796,"line_start":744,"line_end":744,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":126837,"byte_end":126843,"line_start":745,"line_end":745,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127545,"byte_end":127550,"line_start":773,"line_end":773,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127178,"byte_end":127254,"line_start":759,"line_end":759,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127259,"byte_end":127273,"line_start":760,"line_end":760,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127278,"byte_end":127281,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127286,"byte_end":127300,"line_start":762,"line_end":762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127305,"byte_end":127308,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127313,"byte_end":127320,"line_start":764,"line_end":764,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127325,"byte_end":127352,"line_start":765,"line_end":765,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127357,"byte_end":127360,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127365,"byte_end":127396,"line_start":767,"line_end":767,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127401,"byte_end":127422,"line_start":768,"line_end":768,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127427,"byte_end":127441,"line_start":769,"line_end":769,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127446,"byte_end":127472,"line_start":770,"line_end":770,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127477,"byte_end":127484,"line_start":771,"line_end":771,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127525,"byte_end":127531,"line_start":772,"line_end":772,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128304,"byte_end":128311,"line_start":802,"line_end":802,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127714,"byte_end":127790,"line_start":784,"line_end":784,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127795,"byte_end":127863,"line_start":785,"line_end":785,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127868,"byte_end":127895,"line_start":786,"line_end":786,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127900,"byte_end":127903,"line_start":787,"line_end":787,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127908,"byte_end":127920,"line_start":788,"line_end":788,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127925,"byte_end":127928,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127933,"byte_end":127991,"line_start":790,"line_end":790,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127996,"byte_end":127999,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128004,"byte_end":128069,"line_start":792,"line_end":792,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128074,"byte_end":128077,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128082,"byte_end":128096,"line_start":794,"line_end":794,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128101,"byte_end":128104,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128109,"byte_end":128116,"line_start":796,"line_end":796,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128121,"byte_end":128148,"line_start":797,"line_end":797,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128153,"byte_end":128206,"line_start":798,"line_end":798,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128211,"byte_end":128231,"line_start":799,"line_end":799,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128236,"byte_end":128243,"line_start":800,"line_end":800,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128284,"byte_end":128290,"line_start":801,"line_end":801,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129089,"byte_end":129100,"line_start":824,"line_end":824,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128455,"byte_end":128539,"line_start":807,"line_end":807,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128544,"byte_end":128623,"line_start":808,"line_end":808,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128628,"byte_end":128655,"line_start":809,"line_end":809,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128660,"byte_end":128663,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128668,"byte_end":128680,"line_start":811,"line_end":811,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128685,"byte_end":128688,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128693,"byte_end":128773,"line_start":813,"line_end":813,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128778,"byte_end":128794,"line_start":814,"line_end":814,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128799,"byte_end":128802,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128807,"byte_end":128821,"line_start":816,"line_end":816,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128826,"byte_end":128829,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128834,"byte_end":128841,"line_start":818,"line_end":818,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128846,"byte_end":128873,"line_start":819,"line_end":819,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128878,"byte_end":128933,"line_start":820,"line_end":820,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":128938,"byte_end":129016,"line_start":821,"line_end":821,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129021,"byte_end":129028,"line_start":822,"line_end":822,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129069,"byte_end":129075,"line_start":823,"line_end":823,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129884,"byte_end":129897,"line_start":846,"line_end":846,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129278,"byte_end":129347,"line_start":829,"line_end":829,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129352,"byte_end":129417,"line_start":830,"line_end":830,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129422,"byte_end":129495,"line_start":831,"line_end":831,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129500,"byte_end":129503,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129508,"byte_end":129522,"line_start":833,"line_end":833,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129527,"byte_end":129530,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129535,"byte_end":129542,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129547,"byte_end":129574,"line_start":836,"line_end":836,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129579,"byte_end":129582,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129587,"byte_end":129652,"line_start":838,"line_end":838,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129657,"byte_end":129678,"line_start":839,"line_end":839,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129683,"byte_end":129704,"line_start":840,"line_end":840,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129709,"byte_end":129744,"line_start":841,"line_end":841,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129749,"byte_end":129773,"line_start":842,"line_end":842,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129778,"byte_end":129811,"line_start":843,"line_end":843,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129816,"byte_end":129823,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":129864,"byte_end":129870,"line_start":845,"line_end":845,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130883,"byte_end":130892,"line_start":875,"line_end":875,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130015,"byte_end":130083,"line_start":851,"line_end":851,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130088,"byte_end":130166,"line_start":852,"line_end":852,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130171,"byte_end":130244,"line_start":853,"line_end":853,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130249,"byte_end":130252,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130257,"byte_end":130331,"line_start":855,"line_end":855,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130336,"byte_end":130366,"line_start":856,"line_end":856,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130371,"byte_end":130374,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130379,"byte_end":130393,"line_start":858,"line_end":858,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130398,"byte_end":130401,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130406,"byte_end":130413,"line_start":860,"line_end":860,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130418,"byte_end":130445,"line_start":861,"line_end":861,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130450,"byte_end":130453,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130458,"byte_end":130523,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130528,"byte_end":130549,"line_start":864,"line_end":864,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130554,"byte_end":130575,"line_start":865,"line_end":865,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130580,"byte_end":130615,"line_start":866,"line_end":866,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130620,"byte_end":130642,"line_start":867,"line_end":867,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130647,"byte_end":130681,"line_start":868,"line_end":868,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130686,"byte_end":130707,"line_start":869,"line_end":869,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130712,"byte_end":130745,"line_start":870,"line_end":870,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130750,"byte_end":130772,"line_start":871,"line_end":871,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130777,"byte_end":130810,"line_start":872,"line_end":872,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130815,"byte_end":130822,"line_start":873,"line_end":873,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":130863,"byte_end":130869,"line_start":874,"line_end":874,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131652,"byte_end":131657,"line_start":900,"line_end":900,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S, A>>::entry","value":"pub fn entry(&mut Self, K) -> Entry<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131042,"byte_end":131124,"line_start":880,"line_end":880,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131129,"byte_end":131132,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131137,"byte_end":131151,"line_start":882,"line_end":882,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131156,"byte_end":131159,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131164,"byte_end":131171,"line_start":884,"line_end":884,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131176,"byte_end":131203,"line_start":885,"line_end":885,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131208,"byte_end":131211,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131216,"byte_end":131253,"line_start":887,"line_end":887,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131258,"byte_end":131261,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131266,"byte_end":131317,"line_start":889,"line_end":889,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131322,"byte_end":131375,"line_start":890,"line_end":890,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131380,"byte_end":131402,"line_start":891,"line_end":891,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131407,"byte_end":131412,"line_start":892,"line_end":892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131417,"byte_end":131420,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131425,"byte_end":131458,"line_start":894,"line_end":894,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131463,"byte_end":131496,"line_start":895,"line_end":895,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131501,"byte_end":131534,"line_start":896,"line_end":896,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131539,"byte_end":131579,"line_start":897,"line_end":897,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131584,"byte_end":131591,"line_start":898,"line_end":898,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":131632,"byte_end":131638,"line_start":899,"line_end":899,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132826,"byte_end":132829,"line_start":938,"line_end":938,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132178,"byte_end":132240,"line_start":918,"line_end":918,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132245,"byte_end":132248,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132253,"byte_end":132316,"line_start":920,"line_end":920,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132321,"byte_end":132388,"line_start":921,"line_end":921,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132393,"byte_end":132410,"line_start":922,"line_end":922,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132415,"byte_end":132418,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132423,"byte_end":132482,"line_start":924,"line_end":924,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132487,"byte_end":132551,"line_start":925,"line_end":925,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132556,"byte_end":132559,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132564,"byte_end":132578,"line_start":927,"line_end":927,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132583,"byte_end":132586,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132591,"byte_end":132598,"line_start":929,"line_end":929,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132603,"byte_end":132630,"line_start":930,"line_end":930,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132635,"byte_end":132638,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132643,"byte_end":132676,"line_start":932,"line_end":932,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132681,"byte_end":132704,"line_start":933,"line_end":933,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132709,"byte_end":132749,"line_start":934,"line_end":934,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132754,"byte_end":132788,"line_start":935,"line_end":935,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132793,"byte_end":132800,"line_start":936,"line_end":936,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":132805,"byte_end":132814,"line_start":937,"line_end":937,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133796,"byte_end":133809,"line_start":970,"line_end":970,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S, A>>::get_key_value","value":"pub fn get_key_value<Q: ?Sized>(&Self, &Q) -> Option<(&K, &V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133110,"byte_end":133175,"line_start":950,"line_end":950,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133180,"byte_end":133183,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133188,"byte_end":133260,"line_start":952,"line_end":952,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133265,"byte_end":133332,"line_start":953,"line_end":953,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133337,"byte_end":133354,"line_start":954,"line_end":954,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133359,"byte_end":133362,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133367,"byte_end":133426,"line_start":956,"line_end":956,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133431,"byte_end":133495,"line_start":957,"line_end":957,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133500,"byte_end":133503,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133508,"byte_end":133522,"line_start":959,"line_end":959,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133527,"byte_end":133530,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133535,"byte_end":133542,"line_start":961,"line_end":961,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133547,"byte_end":133574,"line_start":962,"line_end":962,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133579,"byte_end":133582,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133587,"byte_end":133620,"line_start":964,"line_end":964,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133625,"byte_end":133648,"line_start":965,"line_end":965,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133653,"byte_end":133709,"line_start":966,"line_end":966,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133714,"byte_end":133758,"line_start":967,"line_end":967,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133763,"byte_end":133770,"line_start":968,"line_end":968,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":133775,"byte_end":133784,"line_start":969,"line_end":969,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135239,"byte_end":135256,"line_start":1016,"line_end":1016,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S, A>>::get_key_value_mut","value":"pub fn get_key_value_mut<Q: ?Sized>(&mut Self, &Q) -> Option<(&K, &mut V)>\nwhere K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134371,"byte_end":134471,"line_start":992,"line_end":992,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134476,"byte_end":134479,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134484,"byte_end":134556,"line_start":994,"line_end":994,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134561,"byte_end":134628,"line_start":995,"line_end":995,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134633,"byte_end":134650,"line_start":996,"line_end":996,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134655,"byte_end":134658,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134663,"byte_end":134722,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134727,"byte_end":134791,"line_start":999,"line_end":999,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134796,"byte_end":134799,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134804,"byte_end":134818,"line_start":1001,"line_end":1001,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134823,"byte_end":134826,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134831,"byte_end":134838,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134843,"byte_end":134870,"line_start":1004,"line_end":1004,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134875,"byte_end":134878,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134883,"byte_end":134916,"line_start":1006,"line_end":1006,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134921,"byte_end":134944,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":134949,"byte_end":135001,"line_start":1008,"line_end":1008,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135006,"byte_end":135028,"line_start":1009,"line_end":1009,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135033,"byte_end":135061,"line_start":1010,"line_end":1010,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135066,"byte_end":135079,"line_start":1011,"line_end":1011,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135084,"byte_end":135148,"line_start":1012,"line_end":1012,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135153,"byte_end":135201,"line_start":1013,"line_end":1013,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135206,"byte_end":135213,"line_start":1014,"line_end":1014,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135218,"byte_end":135227,"line_start":1015,"line_end":1015,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136287,"byte_end":136299,"line_start":1048,"line_end":1048,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S, A>>::contains_key","value":"pub fn contains_key<Q: ?Sized>(&Self, &Q) -> bool where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135584,"byte_end":135653,"line_start":1028,"line_end":1028,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135658,"byte_end":135661,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135666,"byte_end":135729,"line_start":1030,"line_end":1030,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135734,"byte_end":135801,"line_start":1031,"line_end":1031,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135806,"byte_end":135823,"line_start":1032,"line_end":1032,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135828,"byte_end":135831,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135836,"byte_end":135895,"line_start":1034,"line_end":1034,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135900,"byte_end":135964,"line_start":1035,"line_end":1035,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135969,"byte_end":135972,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135977,"byte_end":135991,"line_start":1037,"line_end":1037,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":135996,"byte_end":135999,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136004,"byte_end":136011,"line_start":1039,"line_end":1039,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136016,"byte_end":136043,"line_start":1040,"line_end":1040,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136048,"byte_end":136051,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136056,"byte_end":136089,"line_start":1042,"line_end":1042,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136094,"byte_end":136117,"line_start":1043,"line_end":1043,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136122,"byte_end":136165,"line_start":1044,"line_end":1044,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136170,"byte_end":136214,"line_start":1045,"line_end":1045,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136219,"byte_end":136226,"line_start":1046,"line_end":1046,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136267,"byte_end":136273,"line_start":1047,"line_end":1047,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137156,"byte_end":137163,"line_start":1078,"line_end":1078,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S, A>>::get_mut","value":"pub fn get_mut<Q: ?Sized>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136440,"byte_end":136510,"line_start":1056,"line_end":1056,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136515,"byte_end":136518,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136523,"byte_end":136586,"line_start":1058,"line_end":1058,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136591,"byte_end":136658,"line_start":1059,"line_end":1059,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136663,"byte_end":136680,"line_start":1060,"line_end":1060,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136685,"byte_end":136688,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136693,"byte_end":136752,"line_start":1062,"line_end":1062,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136757,"byte_end":136821,"line_start":1063,"line_end":1063,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136826,"byte_end":136829,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136834,"byte_end":136848,"line_start":1065,"line_end":1065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136853,"byte_end":136856,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136861,"byte_end":136868,"line_start":1067,"line_end":1067,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136873,"byte_end":136900,"line_start":1068,"line_end":1068,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136905,"byte_end":136908,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136913,"byte_end":136946,"line_start":1070,"line_end":1070,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136951,"byte_end":136974,"line_start":1071,"line_end":1071,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":136979,"byte_end":137017,"line_start":1072,"line_end":1072,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137022,"byte_end":137039,"line_start":1073,"line_end":1073,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137044,"byte_end":137049,"line_start":1074,"line_end":1074,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137054,"byte_end":137083,"line_start":1075,"line_end":1075,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137088,"byte_end":137095,"line_start":1076,"line_end":1076,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":137136,"byte_end":137142,"line_start":1077,"line_end":1077,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143771,"byte_end":143777,"line_start":1261,"line_end":1261,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S, A>>::insert","value":"pub fn insert(&mut Self, K, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":142796,"byte_end":142838,"line_start":1235,"line_end":1235,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":142843,"byte_end":142846,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":142851,"byte_end":142918,"line_start":1237,"line_end":1237,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":142923,"byte_end":142926,"line_start":1238,"line_end":1238,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":142931,"byte_end":143006,"line_start":1239,"line_end":1239,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143011,"byte_end":143082,"line_start":1240,"line_end":1240,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143087,"byte_end":143160,"line_start":1241,"line_end":1241,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143165,"byte_end":143193,"line_start":1242,"line_end":1242,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143198,"byte_end":143201,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143206,"byte_end":143286,"line_start":1244,"line_end":1244,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143291,"byte_end":143359,"line_start":1245,"line_end":1245,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143364,"byte_end":143367,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143372,"byte_end":143386,"line_start":1247,"line_end":1247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143391,"byte_end":143394,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143399,"byte_end":143406,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143411,"byte_end":143438,"line_start":1250,"line_end":1250,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143443,"byte_end":143446,"line_start":1251,"line_end":1251,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143451,"byte_end":143484,"line_start":1252,"line_end":1252,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143489,"byte_end":143531,"line_start":1253,"line_end":1253,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143536,"byte_end":143574,"line_start":1254,"line_end":1254,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143579,"byte_end":143582,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143587,"byte_end":143611,"line_start":1256,"line_end":1256,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143616,"byte_end":143663,"line_start":1257,"line_end":1257,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143668,"byte_end":143698,"line_start":1258,"line_end":1258,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143703,"byte_end":143710,"line_start":1259,"line_end":1259,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":143751,"byte_end":143757,"line_start":1260,"line_end":1260,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144938,"byte_end":144948,"line_start":1296,"line_end":1296,"column_start":12,"column_end":22},"name":"try_insert","qualname":"<HashMap<K, V, S, A>>::try_insert","value":"pub fn try_insert(&mut Self, K, V)\n-> Result<&mut V, OccupiedError<, K, V, S, A>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to insert a key-value pair into the map, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Tries to insert a key-value pair into the map, and returns","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144169,"byte_end":144231,"line_start":1272,"line_end":1272,"column_start":5,"column_end":67}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144236,"byte_end":144286,"line_start":1273,"line_end":1273,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144291,"byte_end":144294,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144299,"byte_end":144311,"line_start":1275,"line_end":1275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144316,"byte_end":144319,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ If the map already had this key present, nothing is updated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144324,"byte_end":144392,"line_start":1277,"line_end":1277,"column_start":5,"column_end":73}},{"value":"/ an error containing the occupied entry and the value is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144397,"byte_end":144466,"line_start":1278,"line_end":1278,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144471,"byte_end":144474,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144479,"byte_end":144493,"line_start":1280,"line_end":1280,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144498,"byte_end":144501,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144506,"byte_end":144522,"line_start":1282,"line_end":1282,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144527,"byte_end":144530,"line_start":1283,"line_end":1283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144535,"byte_end":144542,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144547,"byte_end":144574,"line_start":1285,"line_end":1285,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144579,"byte_end":144582,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144587,"byte_end":144620,"line_start":1287,"line_end":1287,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144625,"byte_end":144680,"line_start":1288,"line_end":1288,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144685,"byte_end":144688,"line_start":1289,"line_end":1289,"column_start":5,"column_end":8}},{"value":"/ let err = map.try_insert(37, \"b\").unwrap_err();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144693,"byte_end":144744,"line_start":1290,"line_end":1290,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(err.entry.key(), &37);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144749,"byte_end":144786,"line_start":1291,"line_end":1291,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(err.entry.get(), &\"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144791,"byte_end":144829,"line_start":1292,"line_end":1292,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(err.value, \"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144834,"byte_end":144865,"line_start":1293,"line_end":1293,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144870,"byte_end":144877,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":144918,"byte_end":144924,"line_start":1295,"line_end":1295,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145983,"byte_end":145989,"line_start":1328,"line_end":1328,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145249,"byte_end":145322,"line_start":1307,"line_end":1307,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145327,"byte_end":145357,"line_start":1308,"line_end":1308,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145362,"byte_end":145365,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145370,"byte_end":145433,"line_start":1310,"line_end":1310,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145438,"byte_end":145505,"line_start":1311,"line_end":1311,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145510,"byte_end":145527,"line_start":1312,"line_end":1312,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145532,"byte_end":145535,"line_start":1313,"line_end":1313,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145540,"byte_end":145599,"line_start":1314,"line_end":1314,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145604,"byte_end":145668,"line_start":1315,"line_end":1315,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145673,"byte_end":145676,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145681,"byte_end":145695,"line_start":1317,"line_end":1317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145700,"byte_end":145703,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145708,"byte_end":145715,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145720,"byte_end":145747,"line_start":1320,"line_end":1320,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145752,"byte_end":145755,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145760,"byte_end":145793,"line_start":1322,"line_end":1322,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145798,"byte_end":145821,"line_start":1323,"line_end":1323,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145826,"byte_end":145868,"line_start":1324,"line_end":1324,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145873,"byte_end":145910,"line_start":1325,"line_end":1325,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145915,"byte_end":145922,"line_start":1326,"line_end":1326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":145963,"byte_end":145969,"line_start":1327,"line_end":1327,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147020,"byte_end":147032,"line_start":1361,"line_end":1361,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S, A>>::remove_entry","value":"pub fn remove_entry<Q: ?Sized>(&mut Self, &Q) -> Option<(K, V)> where\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146271,"byte_end":146344,"line_start":1340,"line_end":1340,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146349,"byte_end":146383,"line_start":1341,"line_end":1341,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146388,"byte_end":146391,"line_start":1342,"line_end":1342,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146396,"byte_end":146459,"line_start":1343,"line_end":1343,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146464,"byte_end":146531,"line_start":1344,"line_end":1344,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146536,"byte_end":146553,"line_start":1345,"line_end":1345,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146558,"byte_end":146561,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146566,"byte_end":146625,"line_start":1347,"line_end":1347,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146630,"byte_end":146694,"line_start":1348,"line_end":1348,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146699,"byte_end":146702,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146707,"byte_end":146721,"line_start":1350,"line_end":1350,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146726,"byte_end":146729,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146734,"byte_end":146741,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146746,"byte_end":146773,"line_start":1353,"line_end":1353,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146778,"byte_end":146781,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146786,"byte_end":146819,"line_start":1355,"line_end":1355,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146824,"byte_end":146847,"line_start":1356,"line_end":1356,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146852,"byte_end":146905,"line_start":1357,"line_end":1357,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146910,"byte_end":146947,"line_start":1358,"line_end":1358,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":146952,"byte_end":146959,"line_start":1359,"line_end":1359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147000,"byte_end":147006,"line_start":1360,"line_end":1360,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149272,"byte_end":149285,"line_start":1404,"line_end":1404,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S, A>>::raw_entry_mut","value":"pub fn raw_entry_mut(&mut Self) -> RawEntryBuilderMut<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147332,"byte_end":147380,"line_start":1372,"line_end":1372,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147385,"byte_end":147388,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147393,"byte_end":147462,"line_start":1374,"line_end":1374,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147467,"byte_end":147540,"line_start":1375,"line_end":1375,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147545,"byte_end":147615,"line_start":1376,"line_end":1376,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147620,"byte_end":147666,"line_start":1377,"line_end":1377,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147671,"byte_end":147674,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147679,"byte_end":147736,"line_start":1379,"line_end":1379,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147741,"byte_end":147744,"line_start":1380,"line_end":1380,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147749,"byte_end":147771,"line_start":1381,"line_end":1381,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147776,"byte_end":147853,"line_start":1382,"line_end":1382,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147858,"byte_end":147922,"line_start":1383,"line_end":1383,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147927,"byte_end":147987,"line_start":1384,"line_end":1384,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147992,"byte_end":147995,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148000,"byte_end":148077,"line_start":1386,"line_end":1386,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148082,"byte_end":148157,"line_start":1387,"line_end":1387,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148162,"byte_end":148238,"line_start":1388,"line_end":1388,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148243,"byte_end":148314,"line_start":1389,"line_end":1389,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148319,"byte_end":148322,"line_start":1390,"line_end":1390,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148327,"byte_end":148402,"line_start":1391,"line_end":1391,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148407,"byte_end":148486,"line_start":1392,"line_end":1392,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148491,"byte_end":148566,"line_start":1393,"line_end":1393,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148571,"byte_end":148633,"line_start":1394,"line_end":1394,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148638,"byte_end":148641,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148646,"byte_end":148716,"line_start":1396,"line_end":1396,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148721,"byte_end":148801,"line_start":1397,"line_end":1397,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148806,"byte_end":148878,"line_start":1398,"line_end":1398,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148883,"byte_end":148959,"line_start":1399,"line_end":1399,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":148964,"byte_end":149039,"line_start":1400,"line_end":1400,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149044,"byte_end":149126,"line_start":1401,"line_end":1401,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149131,"byte_end":149211,"line_start":1402,"line_end":1402,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149252,"byte_end":149258,"line_start":1403,"line_end":1403,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150126,"byte_end":150135,"line_start":1424,"line_end":1424,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S, A>>::raw_entry","value":"pub fn raw_entry(&Self) -> RawEntryBuilder<, K, V, S, A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149389,"byte_end":149447,"line_start":1408,"line_end":1408,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149452,"byte_end":149455,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149460,"byte_end":149529,"line_start":1410,"line_end":1410,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149534,"byte_end":149607,"line_start":1411,"line_end":1411,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149612,"byte_end":149639,"line_start":1412,"line_end":1412,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149644,"byte_end":149647,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149652,"byte_end":149674,"line_start":1414,"line_end":1414,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149679,"byte_end":149701,"line_start":1415,"line_end":1415,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149706,"byte_end":149770,"line_start":1416,"line_end":1416,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149775,"byte_end":149835,"line_start":1417,"line_end":1417,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149840,"byte_end":149843,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149848,"byte_end":149929,"line_start":1419,"line_end":1419,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149934,"byte_end":149964,"line_start":1420,"line_end":1420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149969,"byte_end":149972,"line_start":1421,"line_end":1421,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":149977,"byte_end":150065,"line_start":1422,"line_end":1422,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150106,"byte_end":150112,"line_start":1423,"line_end":1423,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":842},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152082,"byte_end":152086,"line_start":1505,"line_end":1505,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151827,"byte_end":151875,"line_start":1498,"line_end":1498,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151876,"byte_end":151879,"line_start":1499,"line_end":1499,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151880,"byte_end":151955,"line_start":1500,"line_end":1500,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151956,"byte_end":151983,"line_start":1501,"line_end":1501,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151984,"byte_end":151987,"line_start":1502,"line_end":1502,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151988,"byte_end":152033,"line_start":1503,"line_end":1503,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152034,"byte_end":152070,"line_start":1504,"line_end":1504,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":856},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152906,"byte_end":152913,"line_start":1534,"line_end":1534,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152632,"byte_end":152687,"line_start":1527,"line_end":1527,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152688,"byte_end":152691,"line_start":1528,"line_end":1528,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152692,"byte_end":152771,"line_start":1529,"line_end":1529,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152772,"byte_end":152799,"line_start":1530,"line_end":1530,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152800,"byte_end":152803,"line_start":1531,"line_end":1531,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152804,"byte_end":152857,"line_start":1532,"line_end":1532,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152858,"byte_end":152894,"line_start":1533,"line_end":1533,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":869},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153912,"byte_end":153920,"line_start":1563,"line_end":1563,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":873}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153596,"byte_end":153651,"line_start":1556,"line_end":1556,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153652,"byte_end":153655,"line_start":1557,"line_end":1557,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153656,"byte_end":153727,"line_start":1558,"line_end":1558,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153728,"byte_end":153803,"line_start":1559,"line_end":1559,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153804,"byte_end":153807,"line_start":1560,"line_end":1560,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153808,"byte_end":153863,"line_start":1561,"line_end":1561,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153864,"byte_end":153900,"line_start":1562,"line_end":1562,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":879},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154574,"byte_end":154578,"line_start":1585,"line_end":1585,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":883}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154322,"byte_end":154367,"line_start":1578,"line_end":1578,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154368,"byte_end":154371,"line_start":1579,"line_end":1579,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154372,"byte_end":154447,"line_start":1580,"line_end":1580,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154448,"byte_end":154475,"line_start":1581,"line_end":1581,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154476,"byte_end":154479,"line_start":1582,"line_end":1582,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154480,"byte_end":154525,"line_start":1583,"line_end":1583,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154526,"byte_end":154562,"line_start":1584,"line_end":1584,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":892},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155302,"byte_end":155308,"line_start":1612,"line_end":1612,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":896}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155042,"byte_end":155089,"line_start":1605,"line_end":1605,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155090,"byte_end":155093,"line_start":1606,"line_end":1606,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155094,"byte_end":155171,"line_start":1607,"line_end":1607,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155172,"byte_end":155199,"line_start":1608,"line_end":1608,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155200,"byte_end":155203,"line_start":1609,"line_end":1609,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155204,"byte_end":155253,"line_start":1610,"line_end":1610,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155254,"byte_end":155290,"line_start":1611,"line_end":1611,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":905},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156044,"byte_end":156049,"line_start":1639,"line_end":1639,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":910}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155778,"byte_end":155834,"line_start":1632,"line_end":1632,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155835,"byte_end":155838,"line_start":1633,"line_end":1633,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155839,"byte_end":155915,"line_start":1634,"line_end":1634,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155916,"byte_end":155943,"line_start":1635,"line_end":1635,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155944,"byte_end":155947,"line_start":1636,"line_end":1636,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155948,"byte_end":155995,"line_start":1637,"line_end":1637,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155996,"byte_end":156032,"line_start":1638,"line_end":1638,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156778,"byte_end":156789,"line_start":1661,"line_end":1661,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":922},{"krate":0,"index":923}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156457,"byte_end":156547,"line_start":1654,"line_end":1654,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156548,"byte_end":156551,"line_start":1655,"line_end":1655,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156552,"byte_end":156635,"line_start":1656,"line_end":1656,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156636,"byte_end":156663,"line_start":1657,"line_end":1657,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156664,"byte_end":156667,"line_start":1658,"line_end":1658,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156668,"byte_end":156729,"line_start":1659,"line_end":1659,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156730,"byte_end":156766,"line_start":1660,"line_end":1660,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":964},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159055,"byte_end":159064,"line_start":1744,"line_end":1744,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":968}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158776,"byte_end":158830,"line_start":1737,"line_end":1737,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158831,"byte_end":158834,"line_start":1738,"line_end":1738,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158835,"byte_end":158916,"line_start":1739,"line_end":1739,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158917,"byte_end":158944,"line_start":1740,"line_end":1740,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158945,"byte_end":158948,"line_start":1741,"line_end":1741,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158949,"byte_end":159006,"line_start":1742,"line_end":1742,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159007,"byte_end":159043,"line_start":1743,"line_end":1743,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":969},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159351,"byte_end":159369,"line_start":1753,"line_end":1753,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":975}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159110,"byte_end":159194,"line_start":1748,"line_end":1748,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159195,"byte_end":159198,"line_start":1749,"line_end":1749,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159199,"byte_end":159262,"line_start":1750,"line_end":1750,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159263,"byte_end":159266,"line_start":1751,"line_end":1751,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159267,"byte_end":159339,"line_start":1752,"line_end":1752,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":982},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160039,"byte_end":160047,"line_start":1770,"line_end":1770,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut)","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160012,"byte_end":160034,"line_start":1769,"line_end":1769,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":985},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160114,"byte_end":160120,"line_start":1772,"line_end":1772,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut)","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160090,"byte_end":160109,"line_start":1771,"line_end":1771,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":976},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159950,"byte_end":159961,"line_start":1768,"line_end":1768,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"pub enum RawEntryMut<'a, K, V, S, A: Allocator + Clone = Global> {\n    Occupied(RawOccupiedEntryMut),\n    Vacant(RawVacantEntryMut),\n}","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":985}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159457,"byte_end":159537,"line_start":1757,"line_end":1757,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159538,"byte_end":159541,"line_start":1758,"line_end":1758,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159542,"byte_end":159589,"line_start":1759,"line_end":1759,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159590,"byte_end":159593,"line_start":1760,"line_end":1760,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159594,"byte_end":159677,"line_start":1761,"line_end":1761,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159678,"byte_end":159745,"line_start":1762,"line_end":1762,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159746,"byte_end":159749,"line_start":1763,"line_end":1763,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159750,"byte_end":159786,"line_start":1764,"line_end":1764,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159787,"byte_end":159817,"line_start":1765,"line_end":1765,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159818,"byte_end":159881,"line_start":1766,"line_end":1766,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":159882,"byte_end":159940,"line_start":1767,"line_end":1767,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":988},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160312,"byte_end":160331,"line_start":1779,"line_end":1779,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160160,"byte_end":160209,"line_start":1775,"line_end":1775,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160210,"byte_end":160253,"line_start":1776,"line_end":1776,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160254,"byte_end":160257,"line_start":1777,"line_end":1777,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160258,"byte_end":160300,"line_start":1778,"line_end":1778,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160898,"byte_end":160915,"line_start":1804,"line_end":1804,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160749,"byte_end":160795,"line_start":1800,"line_end":1800,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160796,"byte_end":160839,"line_start":1801,"line_end":1801,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160840,"byte_end":160843,"line_start":1802,"line_end":1802,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160844,"byte_end":160886,"line_start":1803,"line_end":1803,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1015},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161259,"byte_end":161274,"line_start":1814,"line_end":1814,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":1021}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161030,"byte_end":161114,"line_start":1809,"line_end":1809,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161115,"byte_end":161118,"line_start":1810,"line_end":1810,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161119,"byte_end":161178,"line_start":1811,"line_end":1811,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161179,"byte_end":161182,"line_start":1812,"line_end":1812,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161183,"byte_end":161247,"line_start":1813,"line_end":1813,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161591,"byte_end":161599,"line_start":1822,"line_end":1822,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> RawEntryMut where S: BuildHasher,\nK: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161439,"byte_end":161486,"line_start":1819,"line_end":1819,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161527,"byte_end":161533,"line_start":1820,"line_end":1820,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161540,"byte_end":161579,"line_start":1821,"line_end":1821,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161994,"byte_end":162017,"line_start":1835,"line_end":1835,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q) -> RawEntryMut where\nK: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161864,"byte_end":161924,"line_start":1832,"line_end":1832,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161929,"byte_end":161938,"line_start":1833,"line_end":1833,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161943,"byte_end":161982,"line_start":1834,"line_end":1834,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1038},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162424,"byte_end":162433,"line_start":1848,"line_end":1848,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> RawEntryMut where for<'b> F: FnMut(&'b K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162271,"byte_end":162319,"line_start":1845,"line_end":1845,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162360,"byte_end":162366,"line_start":1846,"line_end":1846,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162373,"byte_end":162412,"line_start":1847,"line_end":1847,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163459,"byte_end":163467,"line_start":1878,"line_end":1878,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"pub fn from_key<Q: ?Sized>(Self, &Q) -> Option<(&'a K, &'a V)> where\nS: BuildHasher, K: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163327,"byte_end":163354,"line_start":1875,"line_end":1875,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163395,"byte_end":163401,"line_start":1876,"line_end":1876,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163408,"byte_end":163447,"line_start":1877,"line_end":1877,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163874,"byte_end":163897,"line_start":1891,"line_end":1891,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"pub fn from_key_hashed_nocheck<Q: ?Sized>(Self, u64, &Q)\n-> Option<(&'a K, &'a V)> where K: Borrow<Q>, Q: Eq","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163727,"byte_end":163769,"line_start":1888,"line_end":1888,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163810,"byte_end":163816,"line_start":1889,"line_end":1889,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163823,"byte_end":163862,"line_start":1890,"line_end":1890,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164541,"byte_end":164550,"line_start":1913,"line_end":1913,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"pub fn from_hash<F>(Self, u64, F) -> Option<(&'a K, &'a V)> where F: FnMut(&K)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164408,"byte_end":164436,"line_start":1910,"line_end":1910,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164477,"byte_end":164483,"line_start":1911,"line_end":1911,"column_start":41,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164490,"byte_end":164529,"line_start":1912,"line_end":1912,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165219,"byte_end":165225,"line_start":1935,"line_end":1935,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"pub fn insert(Self, K, V) -> RawOccupiedEntryMut where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164775,"byte_end":164842,"line_start":1922,"line_end":1922,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164847,"byte_end":164850,"line_start":1923,"line_end":1923,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164855,"byte_end":164869,"line_start":1924,"line_end":1924,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164874,"byte_end":164877,"line_start":1925,"line_end":1925,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164882,"byte_end":164889,"line_start":1926,"line_end":1926,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164894,"byte_end":164921,"line_start":1927,"line_end":1927,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164926,"byte_end":164929,"line_start":1928,"line_end":1928,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164934,"byte_end":164987,"line_start":1929,"line_end":1929,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164992,"byte_end":165076,"line_start":1930,"line_end":1930,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165081,"byte_end":165084,"line_start":1931,"line_end":1931,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165089,"byte_end":165146,"line_start":1932,"line_end":1932,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165151,"byte_end":165158,"line_start":1933,"line_end":1933,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165199,"byte_end":165205,"line_start":1934,"line_end":1934,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166208,"byte_end":166217,"line_start":1966,"line_end":1966,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"pub fn or_insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165585,"byte_end":165667,"line_start":1949,"line_end":1949,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165672,"byte_end":165729,"line_start":1950,"line_end":1950,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165734,"byte_end":165737,"line_start":1951,"line_end":1951,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165742,"byte_end":165756,"line_start":1952,"line_end":1952,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165761,"byte_end":165764,"line_start":1953,"line_end":1953,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165769,"byte_end":165776,"line_start":1954,"line_end":1954,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165781,"byte_end":165808,"line_start":1955,"line_end":1955,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165813,"byte_end":165816,"line_start":1956,"line_end":1956,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165821,"byte_end":165874,"line_start":1957,"line_end":1957,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165879,"byte_end":165882,"line_start":1958,"line_end":1958,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165887,"byte_end":165959,"line_start":1959,"line_end":1959,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":165964,"byte_end":166000,"line_start":1960,"line_end":1960,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166005,"byte_end":166008,"line_start":1961,"line_end":1961,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166013,"byte_end":166094,"line_start":1962,"line_end":1962,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166099,"byte_end":166135,"line_start":1963,"line_end":1963,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166140,"byte_end":166147,"line_start":1964,"line_end":1964,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166188,"byte_end":166194,"line_start":1965,"line_end":1965,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167121,"byte_end":167135,"line_start":1994,"line_end":1994,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"pub fn or_insert_with<F>(Self, F) -> (&'a mut K, &'a mut V) where F: FnOnce()\n-> (K, V), K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166531,"byte_end":166624,"line_start":1977,"line_end":1977,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166629,"byte_end":166698,"line_start":1978,"line_end":1978,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166703,"byte_end":166706,"line_start":1979,"line_end":1979,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166711,"byte_end":166725,"line_start":1980,"line_end":1980,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166730,"byte_end":166733,"line_start":1981,"line_end":1981,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166738,"byte_end":166745,"line_start":1982,"line_end":1982,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166750,"byte_end":166777,"line_start":1983,"line_end":1983,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166782,"byte_end":166785,"line_start":1984,"line_end":1984,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166790,"byte_end":166846,"line_start":1985,"line_end":1985,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166851,"byte_end":166854,"line_start":1986,"line_end":1986,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166859,"byte_end":166924,"line_start":1987,"line_end":1987,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166929,"byte_end":166970,"line_start":1988,"line_end":1988,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166975,"byte_end":166982,"line_start":1989,"line_end":1989,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166987,"byte_end":166990,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":166995,"byte_end":167048,"line_start":1991,"line_end":1991,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167053,"byte_end":167060,"line_start":1992,"line_end":1992,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167101,"byte_end":167107,"line_start":1993,"line_end":1993,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168231,"byte_end":168241,"line_start":2032,"line_end":2032,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut K, &mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167514,"byte_end":167582,"line_start":2009,"line_end":2009,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167587,"byte_end":167622,"line_start":2010,"line_end":2010,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167627,"byte_end":167630,"line_start":2011,"line_end":2011,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167635,"byte_end":167649,"line_start":2012,"line_end":2012,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167654,"byte_end":167657,"line_start":2013,"line_end":2013,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167662,"byte_end":167669,"line_start":2014,"line_end":2014,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167674,"byte_end":167701,"line_start":2015,"line_end":2015,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167706,"byte_end":167709,"line_start":2016,"line_end":2016,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167714,"byte_end":167767,"line_start":2017,"line_end":2017,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167772,"byte_end":167775,"line_start":2018,"line_end":2018,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167780,"byte_end":167803,"line_start":2019,"line_end":2019,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167808,"byte_end":167837,"line_start":2020,"line_end":2020,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167842,"byte_end":167881,"line_start":2021,"line_end":2021,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167886,"byte_end":167921,"line_start":2022,"line_end":2022,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167926,"byte_end":167963,"line_start":2023,"line_end":2023,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167968,"byte_end":167971,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":167976,"byte_end":167999,"line_start":2025,"line_end":2025,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168004,"byte_end":168033,"line_start":2026,"line_end":2026,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168038,"byte_end":168077,"line_start":2027,"line_end":2027,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168082,"byte_end":168116,"line_start":2028,"line_end":2028,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168121,"byte_end":168158,"line_start":2029,"line_end":2029,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168163,"byte_end":168170,"line_start":2030,"line_end":2030,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168211,"byte_end":168217,"line_start":2031,"line_end":2031,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170327,"byte_end":170349,"line_start":2104,"line_end":2104,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<RawEntryMut>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168662,"byte_end":168732,"line_start":2048,"line_end":2048,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168737,"byte_end":168806,"line_start":2049,"line_end":2049,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168811,"byte_end":168844,"line_start":2050,"line_end":2050,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168849,"byte_end":168852,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168857,"byte_end":168871,"line_start":2052,"line_end":2052,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168876,"byte_end":168879,"line_start":2053,"line_end":2053,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168884,"byte_end":168891,"line_start":2054,"line_end":2054,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168896,"byte_end":168923,"line_start":2055,"line_end":2055,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::RawEntryMut;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168928,"byte_end":168969,"line_start":2056,"line_end":2056,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168974,"byte_end":168977,"line_start":2057,"line_end":2057,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":168982,"byte_end":169035,"line_start":2058,"line_end":2058,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169040,"byte_end":169043,"line_start":2059,"line_end":2059,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169048,"byte_end":169067,"line_start":2060,"line_end":2060,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169072,"byte_end":169096,"line_start":2061,"line_end":2061,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169101,"byte_end":169131,"line_start":2062,"line_end":2062,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169136,"byte_end":169187,"line_start":2063,"line_end":2063,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169192,"byte_end":169195,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169200,"byte_end":169217,"line_start":2065,"line_end":2065,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169222,"byte_end":169259,"line_start":2066,"line_end":2066,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169264,"byte_end":169309,"line_start":2067,"line_end":2067,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169314,"byte_end":169319,"line_start":2068,"line_end":2068,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169324,"byte_end":169327,"line_start":2069,"line_end":2069,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169332,"byte_end":169364,"line_start":2070,"line_end":2070,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169369,"byte_end":169372,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169377,"byte_end":169396,"line_start":2072,"line_end":2072,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169401,"byte_end":169425,"line_start":2073,"line_end":2073,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169430,"byte_end":169460,"line_start":2074,"line_end":2074,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169465,"byte_end":169505,"line_start":2075,"line_end":2075,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169510,"byte_end":169550,"line_start":2076,"line_end":2076,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169555,"byte_end":169585,"line_start":2077,"line_end":2077,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169590,"byte_end":169613,"line_start":2078,"line_end":2078,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169618,"byte_end":169629,"line_start":2079,"line_end":2079,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169634,"byte_end":169637,"line_start":2080,"line_end":2080,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169642,"byte_end":169659,"line_start":2081,"line_end":2081,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Occupied(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169664,"byte_end":169701,"line_start":2082,"line_end":2082,"column_start":5,"column_end":42}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169706,"byte_end":169752,"line_start":2083,"line_end":2083,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169757,"byte_end":169794,"line_start":2084,"line_end":2084,"column_start":5,"column_end":42}},{"value":"/     },","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169799,"byte_end":169809,"line_start":2085,"line_end":2085,"column_start":5,"column_end":15}},{"value":"/     RawEntryMut::Vacant(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169814,"byte_end":169857,"line_start":2086,"line_end":2086,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169862,"byte_end":169867,"line_start":2087,"line_end":2087,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169872,"byte_end":169875,"line_start":2088,"line_end":2088,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169880,"byte_end":169917,"line_start":2089,"line_end":2089,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169922,"byte_end":169925,"line_start":2090,"line_end":2090,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169930,"byte_end":169949,"line_start":2091,"line_end":2091,"column_start":5,"column_end":24}},{"value":"/     .raw_entry_mut()","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169954,"byte_end":169978,"line_start":2092,"line_end":2092,"column_start":5,"column_end":29}},{"value":"/     .from_key(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":169983,"byte_end":170013,"line_start":2093,"line_end":2093,"column_start":5,"column_end":35}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170018,"byte_end":170065,"line_start":2094,"line_end":2094,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170070,"byte_end":170073,"line_start":2095,"line_end":2095,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170078,"byte_end":170095,"line_start":2096,"line_end":2096,"column_start":5,"column_end":22}},{"value":"/     RawEntryMut::Vacant(_) => {},","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170100,"byte_end":170137,"line_start":2097,"line_end":2097,"column_start":5,"column_end":42}},{"value":"/     RawEntryMut::Occupied(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170142,"byte_end":170187,"line_start":2098,"line_end":2098,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170192,"byte_end":170197,"line_start":2099,"line_end":2099,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170202,"byte_end":170205,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170210,"byte_end":170254,"line_start":2101,"line_end":2101,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170259,"byte_end":170266,"line_start":2102,"line_end":2102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170307,"byte_end":170313,"line_start":2103,"line_end":2103,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170773,"byte_end":170776,"line_start":2118,"line_end":2118,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170667,"byte_end":170712,"line_start":2116,"line_end":2116,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170753,"byte_end":170759,"line_start":2117,"line_end":2117,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170958,"byte_end":170965,"line_start":2124,"line_end":2124,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"pub fn key_mut(&mut Self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170844,"byte_end":170897,"line_start":2122,"line_end":2122,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170938,"byte_end":170944,"line_start":2123,"line_end":2123,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171226,"byte_end":171234,"line_start":2131,"line_end":2131,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"pub fn into_key(Self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171045,"byte_end":171116,"line_start":2128,"line_end":2128,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171121,"byte_end":171165,"line_start":2129,"line_end":2129,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171206,"byte_end":171212,"line_start":2130,"line_end":2130,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171420,"byte_end":171423,"line_start":2137,"line_end":2137,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171312,"byte_end":171359,"line_start":2135,"line_end":2135,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171400,"byte_end":171406,"line_start":2136,"line_end":2136,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171682,"byte_end":171690,"line_start":2144,"line_end":2144,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171491,"byte_end":171572,"line_start":2141,"line_end":2141,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171577,"byte_end":171621,"line_start":2142,"line_end":2142,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171662,"byte_end":171668,"line_start":2143,"line_end":2143,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171884,"byte_end":171891,"line_start":2150,"line_end":2150,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171768,"byte_end":171823,"line_start":2148,"line_end":2148,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171864,"byte_end":171870,"line_start":2149,"line_end":2149,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172087,"byte_end":172100,"line_start":2156,"line_end":2156,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"pub fn get_key_value(&mut Self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":171971,"byte_end":172026,"line_start":2154,"line_end":2154,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172067,"byte_end":172073,"line_start":2155,"line_end":2155,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172373,"byte_end":172390,"line_start":2165,"line_end":2165,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"pub fn get_key_value_mut(&mut Self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172249,"byte_end":172312,"line_start":2163,"line_end":2163,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172353,"byte_end":172359,"line_start":2164,"line_end":2164,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172758,"byte_end":172772,"line_start":2175,"line_end":2175,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"pub fn into_key_value(Self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172559,"byte_end":172648,"line_start":2172,"line_end":2172,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172653,"byte_end":172697,"line_start":2173,"line_end":2173,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172738,"byte_end":172744,"line_start":2174,"line_end":2174,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173070,"byte_end":173076,"line_start":2184,"line_end":2184,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":172942,"byte_end":173009,"line_start":2182,"line_end":2182,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173050,"byte_end":173056,"line_start":2183,"line_end":2183,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173288,"byte_end":173298,"line_start":2190,"line_end":2190,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"pub fn insert_key(&mut Self, K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173160,"byte_end":173227,"line_start":2188,"line_end":2188,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173268,"byte_end":173274,"line_start":2189,"line_end":2189,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173492,"byte_end":173498,"line_start":2196,"line_end":2196,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173378,"byte_end":173431,"line_start":2194,"line_end":2194,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173472,"byte_end":173478,"line_start":2195,"line_end":2195,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173671,"byte_end":173683,"line_start":2202,"line_end":2202,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173553,"byte_end":173610,"line_start":2200,"line_end":2200,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173651,"byte_end":173657,"line_start":2201,"line_end":2201,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173996,"byte_end":174014,"line_start":2210,"line_end":2210,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<RawOccupiedEntryMut>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> RawEntryMut where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.\n","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173761,"byte_end":173831,"line_start":2206,"line_end":2206,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173836,"byte_end":173897,"line_start":2207,"line_end":2207,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173902,"byte_end":173935,"line_start":2208,"line_end":2208,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":173976,"byte_end":173982,"line_start":2209,"line_end":2209,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174901,"byte_end":174907,"line_start":2237,"line_end":2237,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"pub fn insert(Self, K, V) -> (&'a mut K, &'a mut V) where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174734,"byte_end":174793,"line_start":2234,"line_end":2234,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174798,"byte_end":174840,"line_start":2235,"line_end":2235,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174881,"byte_end":174887,"line_start":2236,"line_end":2236,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175355,"byte_end":175376,"line_start":2250,"line_end":2250,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"pub fn insert_hashed_nocheck(Self, u64, K, V) -> (&'a mut K, &'a mut V) where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175149,"byte_end":175208,"line_start":2246,"line_end":2246,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175213,"byte_end":175255,"line_start":2247,"line_end":2247,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175296,"byte_end":175302,"line_start":2248,"line_end":2248,"column_start":41,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175309,"byte_end":175343,"line_start":2249,"line_end":2249,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175822,"byte_end":175840,"line_start":2265,"line_end":2265,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"pub fn insert_with_hasher<H>(Self, u64, K, V, H) -> (&'a mut K, &'a mut V)\nwhere H: Fn(&K) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175701,"byte_end":175761,"line_start":2263,"line_end":2263,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":175802,"byte_end":175808,"line_start":2264,"line_end":2264,"column_start":41,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1145},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178365,"byte_end":178373,"line_start":2348,"line_end":2348,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry)","parent":{"krate":0,"index":1139},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178338,"byte_end":178360,"line_start":2347,"line_end":2347,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178435,"byte_end":178441,"line_start":2351,"line_end":2351,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry)","parent":{"krate":0,"index":1139},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178411,"byte_end":178430,"line_start":2350,"line_end":2350,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1139},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178269,"byte_end":178274,"line_start":2343,"line_end":2343,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"pub enum Entry<'a, K, V, S, A = Global> where A: Allocator + Clone {\n    Occupied(OccupiedEntry),\n    Vacant(VacantEntry),\n}","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1148}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178013,"byte_end":178093,"line_start":2337,"line_end":2337,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178094,"byte_end":178097,"line_start":2338,"line_end":2338,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178098,"byte_end":178170,"line_start":2339,"line_end":2339,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178171,"byte_end":178174,"line_start":2340,"line_end":2340,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178175,"byte_end":178211,"line_start":2341,"line_end":2341,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178212,"byte_end":178259,"line_start":2342,"line_end":2342,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1157},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178955,"byte_end":178968,"line_start":2367,"line_end":2367,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178821,"byte_end":178870,"line_start":2363,"line_end":2363,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178871,"byte_end":178908,"line_start":2364,"line_end":2364,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178909,"byte_end":178912,"line_start":2365,"line_end":2365,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178913,"byte_end":178943,"line_start":2366,"line_end":2366,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1183},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179845,"byte_end":179856,"line_start":2404,"line_end":2404,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179714,"byte_end":179760,"line_start":2400,"line_end":2400,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179761,"byte_end":179798,"line_start":2401,"line_end":2401,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179799,"byte_end":179802,"line_start":2402,"line_end":2402,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179803,"byte_end":179833,"line_start":2403,"line_end":2403,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180368,"byte_end":180381,"line_start":2419,"line_end":2419,"column_start":12,"column_end":25},"name":"OccupiedError","qualname":"::map::OccupiedError","value":"OccupiedError { entry, value }","parent":null,"children":[{"krate":0,"index":1204},{"krate":0,"index":1205}],"decl_id":null,"docs":" The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","sig":null,"attributes":[{"value":"/ The error returned by [`try_insert`](HashMap::try_insert) when the key already exists.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180192,"byte_end":180282,"line_start":2416,"line_end":2416,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180283,"byte_end":180286,"line_start":2417,"line_end":2417,"column_start":1,"column_end":4}},{"value":"/ Contains the occupied entry, and the value that was not inserted.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180287,"byte_end":180356,"line_start":2418,"line_end":2418,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1204},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180492,"byte_end":180497,"line_start":2421,"line_end":2421,"column_start":9,"column_end":14},"name":"entry","qualname":"::map::OccupiedError::entry","value":"map::OccupiedEntry<'a, K, V, S, A>","parent":{"krate":0,"index":1198},"children":[],"decl_id":null,"docs":" The entry in the map that was already occupied.\n","sig":null,"attributes":[{"value":"/ The entry in the map that was already occupied.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180432,"byte_end":180483,"line_start":2420,"line_end":2420,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":1205},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180620,"byte_end":180625,"line_start":2423,"line_end":2423,"column_start":9,"column_end":14},"name":"value","qualname":"::map::OccupiedError::value","value":"V","parent":{"krate":0,"index":1198},"children":[],"decl_id":null,"docs":" The value which was not inserted, because the entry was already occupied.\n","sig":null,"attributes":[{"value":"/ The value which was not inserted, because the entry was already occupied.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180534,"byte_end":180611,"line_start":2422,"line_end":2422,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188998,"byte_end":189004,"line_start":2717,"line_end":2717,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"pub fn insert(Self, V) -> OccupiedEntry where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188606,"byte_end":188668,"line_start":2704,"line_end":2704,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188673,"byte_end":188676,"line_start":2705,"line_end":2705,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188681,"byte_end":188695,"line_start":2706,"line_end":2706,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188700,"byte_end":188703,"line_start":2707,"line_end":2707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188708,"byte_end":188715,"line_start":2708,"line_end":2708,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188720,"byte_end":188747,"line_start":2709,"line_end":2709,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188752,"byte_end":188755,"line_start":2710,"line_end":2710,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188760,"byte_end":188813,"line_start":2711,"line_end":2711,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188818,"byte_end":188869,"line_start":2712,"line_end":2712,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188874,"byte_end":188877,"line_start":2713,"line_end":2713,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188882,"byte_end":188925,"line_start":2714,"line_end":2714,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188930,"byte_end":188937,"line_start":2715,"line_end":2715,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188978,"byte_end":188984,"line_start":2716,"line_end":2716,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189883,"byte_end":189892,"line_start":2748,"line_end":2748,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"pub fn or_insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189333,"byte_end":189415,"line_start":2731,"line_end":2731,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189420,"byte_end":189470,"line_start":2732,"line_end":2732,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189475,"byte_end":189478,"line_start":2733,"line_end":2733,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189483,"byte_end":189497,"line_start":2734,"line_end":2734,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189502,"byte_end":189505,"line_start":2735,"line_end":2735,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189510,"byte_end":189517,"line_start":2736,"line_end":2736,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189522,"byte_end":189549,"line_start":2737,"line_end":2737,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189554,"byte_end":189557,"line_start":2738,"line_end":2738,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189562,"byte_end":189615,"line_start":2739,"line_end":2739,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189620,"byte_end":189623,"line_start":2740,"line_end":2740,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189628,"byte_end":189668,"line_start":2741,"line_end":2741,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189673,"byte_end":189709,"line_start":2742,"line_end":2742,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189714,"byte_end":189717,"line_start":2743,"line_end":2743,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189722,"byte_end":189769,"line_start":2744,"line_end":2744,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189774,"byte_end":189810,"line_start":2745,"line_end":2745,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189815,"byte_end":189822,"line_start":2746,"line_end":2746,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":189863,"byte_end":189869,"line_start":2747,"line_end":2747,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190682,"byte_end":190696,"line_start":2775,"line_end":2775,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"pub fn or_insert_with<F: FnOnce() -> V>(Self, F) -> &'a mut V where K: Hash,\nS: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190138,"byte_end":190231,"line_start":2759,"line_end":2759,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190236,"byte_end":190298,"line_start":2760,"line_end":2760,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190303,"byte_end":190306,"line_start":2761,"line_end":2761,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190311,"byte_end":190325,"line_start":2762,"line_end":2762,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190330,"byte_end":190333,"line_start":2763,"line_end":2763,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190338,"byte_end":190345,"line_start":2764,"line_end":2764,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190350,"byte_end":190377,"line_start":2765,"line_end":2765,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190382,"byte_end":190385,"line_start":2766,"line_end":2766,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190390,"byte_end":190446,"line_start":2767,"line_end":2767,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190451,"byte_end":190482,"line_start":2768,"line_end":2768,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190487,"byte_end":190490,"line_start":2769,"line_end":2769,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190495,"byte_end":190543,"line_start":2770,"line_end":2770,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190548,"byte_end":190551,"line_start":2771,"line_end":2771,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190556,"byte_end":190609,"line_start":2772,"line_end":2772,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190614,"byte_end":190621,"line_start":2773,"line_end":2773,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190662,"byte_end":190668,"line_start":2774,"line_end":2774,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191763,"byte_end":191781,"line_start":2805,"line_end":2805,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"pub fn or_insert_with_key<F: FnOnce(&K) -> V>(Self, F) -> &'a mut V where\nK: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function.\n This method allows for generating key-derived values for insertion by providing the default\n function a reference to the key that was moved during the `.entry(key)` method call.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":190962,"byte_end":191057,"line_start":2786,"line_end":2786,"column_start":5,"column_end":100}},{"value":"/ This method allows for generating key-derived values for insertion by providing the default","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191062,"byte_end":191157,"line_start":2787,"line_end":2787,"column_start":5,"column_end":100}},{"value":"/ function a reference to the key that was moved during the `.entry(key)` method call.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191162,"byte_end":191250,"line_start":2788,"line_end":2788,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191255,"byte_end":191258,"line_start":2789,"line_end":2789,"column_start":5,"column_end":8}},{"value":"/ The reference to the moved key is provided so that cloning or copying the key is","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191263,"byte_end":191347,"line_start":2790,"line_end":2790,"column_start":5,"column_end":89}},{"value":"/ unnecessary, unlike with `.or_insert_with(|| ... )`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191352,"byte_end":191408,"line_start":2791,"line_end":2791,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191413,"byte_end":191416,"line_start":2792,"line_end":2792,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191421,"byte_end":191435,"line_start":2793,"line_end":2793,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191440,"byte_end":191443,"line_start":2794,"line_end":2794,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191448,"byte_end":191455,"line_start":2795,"line_end":2795,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191460,"byte_end":191487,"line_start":2796,"line_end":2796,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191492,"byte_end":191495,"line_start":2797,"line_end":2797,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191500,"byte_end":191555,"line_start":2798,"line_end":2798,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191560,"byte_end":191563,"line_start":2799,"line_end":2799,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191568,"byte_end":191641,"line_start":2800,"line_end":2800,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191646,"byte_end":191649,"line_start":2801,"line_end":2801,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191654,"byte_end":191690,"line_start":2802,"line_end":2802,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191695,"byte_end":191702,"line_start":2803,"line_end":2803,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":191743,"byte_end":191749,"line_start":2804,"line_end":2804,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192452,"byte_end":192455,"line_start":2830,"line_end":2830,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192126,"byte_end":192170,"line_start":2819,"line_end":2819,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192175,"byte_end":192178,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192183,"byte_end":192197,"line_start":2821,"line_end":2821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192202,"byte_end":192205,"line_start":2822,"line_end":2822,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192210,"byte_end":192217,"line_start":2823,"line_end":2823,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192222,"byte_end":192249,"line_start":2824,"line_end":2824,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192254,"byte_end":192257,"line_start":2825,"line_end":2825,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192262,"byte_end":192315,"line_start":2826,"line_end":2826,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192320,"byte_end":192379,"line_start":2827,"line_end":2827,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192384,"byte_end":192391,"line_start":2828,"line_end":2828,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192432,"byte_end":192438,"line_start":2829,"line_end":2829,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1379},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193244,"byte_end":193254,"line_start":2858,"line_end":2858,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"pub fn and_modify<F>(Self, F) -> Self where F: FnOnce(&mut V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192622,"byte_end":192690,"line_start":2837,"line_end":2837,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192695,"byte_end":192730,"line_start":2838,"line_end":2838,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192735,"byte_end":192738,"line_start":2839,"line_end":2839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192743,"byte_end":192757,"line_start":2840,"line_end":2840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192762,"byte_end":192765,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192770,"byte_end":192777,"line_start":2842,"line_end":2842,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192782,"byte_end":192809,"line_start":2843,"line_end":2843,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192814,"byte_end":192817,"line_start":2844,"line_end":2844,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192822,"byte_end":192875,"line_start":2845,"line_end":2845,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192880,"byte_end":192883,"line_start":2846,"line_end":2846,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192888,"byte_end":192914,"line_start":2847,"line_end":2847,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192919,"byte_end":192954,"line_start":2848,"line_end":2848,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192959,"byte_end":192981,"line_start":2849,"line_end":2849,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":192986,"byte_end":193023,"line_start":2850,"line_end":2850,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193028,"byte_end":193031,"line_start":2851,"line_end":2851,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193036,"byte_end":193062,"line_start":2852,"line_end":2852,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193067,"byte_end":193102,"line_start":2853,"line_end":2853,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193107,"byte_end":193129,"line_start":2854,"line_end":2854,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193134,"byte_end":193171,"line_start":2855,"line_end":2855,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193176,"byte_end":193183,"line_start":2856,"line_end":2856,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193224,"byte_end":193230,"line_start":2857,"line_end":2857,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195174,"byte_end":195196,"line_start":2926,"line_end":2926,"column_start":12,"column_end":34},"name":"and_replace_entry_with","qualname":"<Entry>::and_replace_entry_with","value":"pub fn and_replace_entry_with<F>(Self, F) -> Self where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n an occupied entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193554,"byte_end":193624,"line_start":2871,"line_end":2871,"column_start":5,"column_end":75}},{"value":"/ an occupied entry and allows to replace or remove it based on the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193629,"byte_end":193698,"line_start":2872,"line_end":2872,"column_start":5,"column_end":74}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193703,"byte_end":193736,"line_start":2873,"line_end":2873,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193741,"byte_end":193744,"line_start":2874,"line_end":2874,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193749,"byte_end":193763,"line_start":2875,"line_end":2875,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193768,"byte_end":193771,"line_start":2876,"line_end":2876,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193776,"byte_end":193783,"line_start":2877,"line_end":2877,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193788,"byte_end":193815,"line_start":2878,"line_end":2878,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193820,"byte_end":193855,"line_start":2879,"line_end":2879,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193860,"byte_end":193863,"line_start":2880,"line_end":2880,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193868,"byte_end":193921,"line_start":2881,"line_end":2881,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193926,"byte_end":193929,"line_start":2882,"line_end":2882,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193934,"byte_end":193953,"line_start":2883,"line_end":2883,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193958,"byte_end":193985,"line_start":2884,"line_end":2884,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| panic!());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":193990,"byte_end":194041,"line_start":2885,"line_end":2885,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194046,"byte_end":194049,"line_start":2886,"line_end":2886,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194054,"byte_end":194071,"line_start":2887,"line_end":2887,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194076,"byte_end":194105,"line_start":2888,"line_end":2888,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194110,"byte_end":194156,"line_start":2889,"line_end":2889,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194161,"byte_end":194170,"line_start":2890,"line_end":2890,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194175,"byte_end":194214,"line_start":2891,"line_end":2891,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194219,"byte_end":194224,"line_start":2892,"line_end":2892,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194229,"byte_end":194232,"line_start":2893,"line_end":2893,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194237,"byte_end":194269,"line_start":2894,"line_end":2894,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194274,"byte_end":194277,"line_start":2895,"line_end":2895,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194282,"byte_end":194301,"line_start":2896,"line_end":2896,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194306,"byte_end":194333,"line_start":2897,"line_end":2897,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|k, v| {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194338,"byte_end":194378,"line_start":2898,"line_end":2898,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194383,"byte_end":194423,"line_start":2899,"line_end":2899,"column_start":5,"column_end":45}},{"value":"/         assert_eq!(v, 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194428,"byte_end":194458,"line_start":2900,"line_end":2900,"column_start":5,"column_end":35}},{"value":"/         Some(v + 1)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194463,"byte_end":194486,"line_start":2901,"line_end":2901,"column_start":5,"column_end":28}},{"value":"/     });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194491,"byte_end":194502,"line_start":2902,"line_end":2902,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194507,"byte_end":194510,"line_start":2903,"line_end":2903,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194515,"byte_end":194532,"line_start":2904,"line_end":2904,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194537,"byte_end":194568,"line_start":2905,"line_end":2905,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194573,"byte_end":194619,"line_start":2906,"line_end":2906,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194624,"byte_end":194661,"line_start":2907,"line_end":2907,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194666,"byte_end":194675,"line_start":2908,"line_end":2908,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194680,"byte_end":194717,"line_start":2909,"line_end":2909,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194722,"byte_end":194727,"line_start":2910,"line_end":2910,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194732,"byte_end":194735,"line_start":2911,"line_end":2911,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194740,"byte_end":194777,"line_start":2912,"line_end":2912,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194782,"byte_end":194785,"line_start":2913,"line_end":2913,"column_start":5,"column_end":8}},{"value":"/ let entry = map","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194790,"byte_end":194809,"line_start":2914,"line_end":2914,"column_start":5,"column_end":24}},{"value":"/     .entry(\"poneyland\")","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194814,"byte_end":194841,"line_start":2915,"line_end":2915,"column_start":5,"column_end":32}},{"value":"/     .and_replace_entry_with(|_k, _v| None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194846,"byte_end":194893,"line_start":2916,"line_end":2916,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194898,"byte_end":194901,"line_start":2917,"line_end":2917,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194906,"byte_end":194923,"line_start":2918,"line_end":2918,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => assert_eq!(e.key(), &\"poneyland\"),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194928,"byte_end":194990,"line_start":2919,"line_end":2919,"column_start":5,"column_end":67}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":194995,"byte_end":195034,"line_start":2920,"line_end":2920,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195039,"byte_end":195044,"line_start":2921,"line_end":2921,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195049,"byte_end":195052,"line_start":2922,"line_end":2922,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195057,"byte_end":195101,"line_start":2923,"line_end":2923,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195106,"byte_end":195113,"line_start":2924,"line_end":2924,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195154,"byte_end":195160,"line_start":2925,"line_end":2925,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195963,"byte_end":195973,"line_start":2952,"line_end":2952,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"pub fn or_default(Self) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195497,"byte_end":195573,"line_start":2938,"line_end":2938,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195578,"byte_end":195640,"line_start":2939,"line_end":2939,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195645,"byte_end":195648,"line_start":2940,"line_end":2940,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195653,"byte_end":195667,"line_start":2941,"line_end":2941,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195672,"byte_end":195675,"line_start":2942,"line_end":2942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195680,"byte_end":195687,"line_start":2943,"line_end":2943,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195692,"byte_end":195719,"line_start":2944,"line_end":2944,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195724,"byte_end":195727,"line_start":2945,"line_end":2945,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195732,"byte_end":195793,"line_start":2946,"line_end":2946,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195798,"byte_end":195838,"line_start":2947,"line_end":2947,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195843,"byte_end":195846,"line_start":2948,"line_end":2948,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195851,"byte_end":195890,"line_start":2949,"line_end":2949,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195895,"byte_end":195902,"line_start":2950,"line_end":2950,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195943,"byte_end":195949,"line_start":2951,"line_end":2951,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196665,"byte_end":196668,"line_start":2977,"line_end":2977,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196292,"byte_end":196337,"line_start":2965,"line_end":2965,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196342,"byte_end":196345,"line_start":2966,"line_end":2966,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196350,"byte_end":196364,"line_start":2967,"line_end":2967,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196369,"byte_end":196372,"line_start":2968,"line_end":2968,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196377,"byte_end":196384,"line_start":2969,"line_end":2969,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196389,"byte_end":196416,"line_start":2970,"line_end":2970,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196421,"byte_end":196424,"line_start":2971,"line_end":2971,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196429,"byte_end":196482,"line_start":2972,"line_end":2972,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196487,"byte_end":196528,"line_start":2973,"line_end":2973,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196533,"byte_end":196592,"line_start":2974,"line_end":2974,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196597,"byte_end":196604,"line_start":2975,"line_end":2975,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196645,"byte_end":196651,"line_start":2976,"line_end":2976,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197321,"byte_end":197333,"line_start":3000,"line_end":3000,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"pub fn remove_entry(Self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196736,"byte_end":196793,"line_start":2981,"line_end":2981,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196798,"byte_end":196801,"line_start":2982,"line_end":2982,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196806,"byte_end":196820,"line_start":2983,"line_end":2983,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196825,"byte_end":196828,"line_start":2984,"line_end":2984,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196833,"byte_end":196840,"line_start":2985,"line_end":2985,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196845,"byte_end":196872,"line_start":2986,"line_end":2986,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196877,"byte_end":196912,"line_start":2987,"line_end":2987,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196917,"byte_end":196920,"line_start":2988,"line_end":2988,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196925,"byte_end":196978,"line_start":2989,"line_end":2989,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196983,"byte_end":197024,"line_start":2990,"line_end":2990,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197029,"byte_end":197032,"line_start":2991,"line_end":2991,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197037,"byte_end":197093,"line_start":2992,"line_end":2992,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197098,"byte_end":197142,"line_start":2993,"line_end":2993,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197147,"byte_end":197172,"line_start":2994,"line_end":2994,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197177,"byte_end":197182,"line_start":2995,"line_end":2995,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197187,"byte_end":197190,"line_start":2996,"line_end":2996,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197195,"byte_end":197248,"line_start":2997,"line_end":2997,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197253,"byte_end":197260,"line_start":2998,"line_end":2998,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197301,"byte_end":197307,"line_start":2999,"line_end":2999,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197885,"byte_end":197888,"line_start":3020,"line_end":3020,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"pub fn get(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197417,"byte_end":197464,"line_start":3004,"line_end":3004,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197469,"byte_end":197472,"line_start":3005,"line_end":3005,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197477,"byte_end":197491,"line_start":3006,"line_end":3006,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197496,"byte_end":197499,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197504,"byte_end":197511,"line_start":3008,"line_end":3008,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197516,"byte_end":197543,"line_start":3009,"line_end":3009,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197548,"byte_end":197583,"line_start":3010,"line_end":3010,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197588,"byte_end":197591,"line_start":3011,"line_end":3011,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197596,"byte_end":197649,"line_start":3012,"line_end":3012,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197654,"byte_end":197695,"line_start":3013,"line_end":3013,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197700,"byte_end":197703,"line_start":3014,"line_end":3014,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197708,"byte_end":197764,"line_start":3015,"line_end":3015,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197769,"byte_end":197802,"line_start":3016,"line_end":3016,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197807,"byte_end":197812,"line_start":3017,"line_end":3017,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197817,"byte_end":197824,"line_start":3018,"line_end":3018,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197865,"byte_end":197871,"line_start":3019,"line_end":3019,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198848,"byte_end":198855,"line_start":3052,"line_end":3052,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":197956,"byte_end":198011,"line_start":3024,"line_end":3024,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198016,"byte_end":198019,"line_start":3025,"line_end":3025,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198024,"byte_end":198096,"line_start":3026,"line_end":3026,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198101,"byte_end":198156,"line_start":3027,"line_end":3027,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198161,"byte_end":198164,"line_start":3028,"line_end":3028,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198169,"byte_end":198203,"line_start":3029,"line_end":3029,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198208,"byte_end":198211,"line_start":3030,"line_end":3030,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198216,"byte_end":198230,"line_start":3031,"line_end":3031,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198235,"byte_end":198238,"line_start":3032,"line_end":3032,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198243,"byte_end":198250,"line_start":3033,"line_end":3033,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198255,"byte_end":198282,"line_start":3034,"line_end":3034,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198287,"byte_end":198322,"line_start":3035,"line_end":3035,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198327,"byte_end":198330,"line_start":3036,"line_end":3036,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198335,"byte_end":198388,"line_start":3037,"line_end":3037,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198393,"byte_end":198434,"line_start":3038,"line_end":3038,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198439,"byte_end":198442,"line_start":3039,"line_end":3039,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198447,"byte_end":198484,"line_start":3040,"line_end":3040,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198489,"byte_end":198549,"line_start":3041,"line_end":3041,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198554,"byte_end":198581,"line_start":3042,"line_end":3042,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198586,"byte_end":198619,"line_start":3043,"line_end":3043,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198624,"byte_end":198627,"line_start":3044,"line_end":3044,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198632,"byte_end":198684,"line_start":3045,"line_end":3045,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198689,"byte_end":198715,"line_start":3046,"line_end":3046,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198720,"byte_end":198725,"line_start":3047,"line_end":3047,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198730,"byte_end":198733,"line_start":3048,"line_end":3048,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198738,"byte_end":198775,"line_start":3049,"line_end":3049,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198780,"byte_end":198787,"line_start":3050,"line_end":3050,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198828,"byte_end":198834,"line_start":3051,"line_end":3051,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199707,"byte_end":199715,"line_start":3080,"line_end":3080,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"pub fn into_mut(Self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":198935,"byte_end":199016,"line_start":3056,"line_end":3056,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199021,"byte_end":199065,"line_start":3057,"line_end":3057,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199070,"byte_end":199073,"line_start":3058,"line_end":3058,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199078,"byte_end":199154,"line_start":3059,"line_end":3059,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199159,"byte_end":199162,"line_start":3060,"line_end":3060,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199167,"byte_end":199199,"line_start":3061,"line_end":3061,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199204,"byte_end":199207,"line_start":3062,"line_end":3062,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199212,"byte_end":199226,"line_start":3063,"line_end":3063,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199231,"byte_end":199234,"line_start":3064,"line_end":3064,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199239,"byte_end":199246,"line_start":3065,"line_end":3065,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199251,"byte_end":199278,"line_start":3066,"line_end":3066,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199283,"byte_end":199318,"line_start":3067,"line_end":3067,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199323,"byte_end":199326,"line_start":3068,"line_end":3068,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199331,"byte_end":199384,"line_start":3069,"line_end":3069,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199389,"byte_end":199430,"line_start":3070,"line_end":3070,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199435,"byte_end":199438,"line_start":3071,"line_end":3071,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199443,"byte_end":199480,"line_start":3072,"line_end":3072,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199485,"byte_end":199541,"line_start":3073,"line_end":3073,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199546,"byte_end":199574,"line_start":3074,"line_end":3074,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199579,"byte_end":199584,"line_start":3075,"line_end":3075,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199589,"byte_end":199592,"line_start":3076,"line_end":3076,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199597,"byte_end":199634,"line_start":3077,"line_end":3077,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199639,"byte_end":199646,"line_start":3078,"line_end":3078,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199687,"byte_end":199693,"line_start":3079,"line_end":3079,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200339,"byte_end":200345,"line_start":3102,"line_end":3102,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"pub fn insert(&mut Self, V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199793,"byte_end":199860,"line_start":3084,"line_end":3084,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199865,"byte_end":199868,"line_start":3085,"line_end":3085,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199873,"byte_end":199887,"line_start":3086,"line_end":3086,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199892,"byte_end":199895,"line_start":3087,"line_end":3087,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199900,"byte_end":199907,"line_start":3088,"line_end":3088,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199912,"byte_end":199939,"line_start":3089,"line_end":3089,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199944,"byte_end":199979,"line_start":3090,"line_end":3090,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199984,"byte_end":199987,"line_start":3091,"line_end":3091,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":199992,"byte_end":200045,"line_start":3092,"line_end":3092,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200050,"byte_end":200091,"line_start":3093,"line_end":3093,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200096,"byte_end":200099,"line_start":3094,"line_end":3094,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200104,"byte_end":200164,"line_start":3095,"line_end":3095,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200169,"byte_end":200206,"line_start":3096,"line_end":3096,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200211,"byte_end":200216,"line_start":3097,"line_end":3097,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200221,"byte_end":200224,"line_start":3098,"line_end":3098,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200229,"byte_end":200266,"line_start":3099,"line_end":3099,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200271,"byte_end":200278,"line_start":3100,"line_end":3100,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200319,"byte_end":200325,"line_start":3101,"line_end":3101,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201027,"byte_end":201033,"line_start":3126,"line_end":3126,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"pub fn remove(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200485,"byte_end":200538,"line_start":3108,"line_end":3108,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200543,"byte_end":200546,"line_start":3109,"line_end":3109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200551,"byte_end":200565,"line_start":3110,"line_end":3110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200570,"byte_end":200573,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200578,"byte_end":200585,"line_start":3112,"line_end":3112,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200590,"byte_end":200617,"line_start":3113,"line_end":3113,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200622,"byte_end":200657,"line_start":3114,"line_end":3114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200662,"byte_end":200665,"line_start":3115,"line_end":3115,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200670,"byte_end":200723,"line_start":3116,"line_end":3116,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200728,"byte_end":200769,"line_start":3117,"line_end":3117,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200774,"byte_end":200777,"line_start":3118,"line_end":3118,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200782,"byte_end":200838,"line_start":3119,"line_end":3119,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200843,"byte_end":200878,"line_start":3120,"line_end":3120,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200883,"byte_end":200888,"line_start":3121,"line_end":3121,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200893,"byte_end":200896,"line_start":3122,"line_end":3122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200901,"byte_end":200954,"line_start":3123,"line_end":3123,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":200959,"byte_end":200966,"line_start":3124,"line_end":3124,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201007,"byte_end":201013,"line_start":3125,"line_end":3125,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201966,"byte_end":201979,"line_start":3155,"line_end":3155,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"pub fn replace_entry(Self, V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201088,"byte_end":201180,"line_start":3130,"line_end":3130,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201185,"byte_end":201223,"line_start":3131,"line_end":3131,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201228,"byte_end":201231,"line_start":3132,"line_end":3132,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201236,"byte_end":201248,"line_start":3133,"line_end":3133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201253,"byte_end":201256,"line_start":3134,"line_end":3134,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201261,"byte_end":201336,"line_start":3135,"line_end":3135,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201341,"byte_end":201344,"line_start":3136,"line_end":3136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201349,"byte_end":201363,"line_start":3137,"line_end":3137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201368,"byte_end":201371,"line_start":3138,"line_end":3138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201376,"byte_end":201383,"line_start":3139,"line_end":3139,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201388,"byte_end":201434,"line_start":3140,"line_end":3140,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201439,"byte_end":201459,"line_start":3141,"line_end":3141,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201464,"byte_end":201467,"line_start":3142,"line_end":3142,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201472,"byte_end":201531,"line_start":3143,"line_end":3143,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201536,"byte_end":201591,"line_start":3144,"line_end":3144,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201596,"byte_end":201599,"line_start":3145,"line_end":3145,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201604,"byte_end":201656,"line_start":3146,"line_end":3146,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201661,"byte_end":201664,"line_start":3147,"line_end":3147,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201669,"byte_end":201724,"line_start":3148,"line_end":3148,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201729,"byte_end":201792,"line_start":3149,"line_end":3149,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201797,"byte_end":201875,"line_start":3150,"line_end":3150,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201880,"byte_end":201885,"line_start":3151,"line_end":3151,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201890,"byte_end":201893,"line_start":3152,"line_end":3152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201898,"byte_end":201905,"line_start":3153,"line_end":3153,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":201946,"byte_end":201952,"line_start":3154,"line_end":3154,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203253,"byte_end":203264,"line_start":3193,"line_end":3193,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"pub fn replace_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202229,"byte_end":202305,"line_start":3164,"line_end":3164,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202310,"byte_end":202313,"line_start":3165,"line_end":3165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202318,"byte_end":202330,"line_start":3166,"line_end":3166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202335,"byte_end":202338,"line_start":3167,"line_end":3167,"column_start":5,"column_end":8}},{"value":"/ Will panic if this OccupiedEntry was created through [`Entry::insert`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202343,"byte_end":202418,"line_start":3168,"line_end":3168,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202423,"byte_end":202426,"line_start":3169,"line_end":3169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202431,"byte_end":202445,"line_start":3170,"line_end":3170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202450,"byte_end":202453,"line_start":3171,"line_end":3171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202458,"byte_end":202465,"line_start":3172,"line_end":3172,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202470,"byte_end":202516,"line_start":3173,"line_end":3173,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202521,"byte_end":202541,"line_start":3174,"line_end":3174,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202546,"byte_end":202549,"line_start":3175,"line_end":3175,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202554,"byte_end":202613,"line_start":3176,"line_end":3176,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202618,"byte_end":202674,"line_start":3177,"line_end":3177,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202679,"byte_end":202682,"line_start":3178,"line_end":3178,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202687,"byte_end":202737,"line_start":3179,"line_end":3179,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202742,"byte_end":202745,"line_start":3180,"line_end":3180,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202750,"byte_end":202795,"line_start":3181,"line_end":3181,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202800,"byte_end":202803,"line_start":3182,"line_end":3182,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202808,"byte_end":202898,"line_start":3183,"line_end":3183,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202903,"byte_end":202935,"line_start":3184,"line_end":3184,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":202940,"byte_end":203006,"line_start":3185,"line_end":3185,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203011,"byte_end":203097,"line_start":3186,"line_end":3186,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203102,"byte_end":203138,"line_start":3187,"line_end":3187,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203143,"byte_end":203156,"line_start":3188,"line_end":3188,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203161,"byte_end":203170,"line_start":3189,"line_end":3189,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203175,"byte_end":203180,"line_start":3190,"line_end":3190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203185,"byte_end":203192,"line_start":3191,"line_end":3191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203233,"byte_end":203239,"line_start":3192,"line_end":3192,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204908,"byte_end":204926,"line_start":3247,"line_end":3247,"column_start":12,"column_end":30},"name":"replace_entry_with","qualname":"<OccupiedEntry>::replace_entry_with","value":"pub fn replace_entry_with<F>(Self, F) -> Entry where F: FnOnce(&K, V) ->\nOption<V>","parent":null,"children":[],"decl_id":null,"docs":" Provides shared access to the key and owned access to the value of\n the entry and allows to replace or remove it based on the\n value of the returned option.","sig":null,"attributes":[{"value":"/ Provides shared access to the key and owned access to the value of","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203394,"byte_end":203464,"line_start":3198,"line_end":3198,"column_start":5,"column_end":75}},{"value":"/ the entry and allows to replace or remove it based on the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203469,"byte_end":203530,"line_start":3199,"line_end":3199,"column_start":5,"column_end":66}},{"value":"/ value of the returned option.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203535,"byte_end":203568,"line_start":3200,"line_end":3200,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203573,"byte_end":203576,"line_start":3201,"line_end":3201,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203581,"byte_end":203595,"line_start":3202,"line_end":3202,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203600,"byte_end":203603,"line_start":3203,"line_end":3203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203608,"byte_end":203615,"line_start":3204,"line_end":3204,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203620,"byte_end":203647,"line_start":3205,"line_end":3205,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203652,"byte_end":203687,"line_start":3206,"line_end":3206,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203692,"byte_end":203695,"line_start":3207,"line_end":3207,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203700,"byte_end":203753,"line_start":3208,"line_end":3208,"column_start":5,"column_end":58}},{"value":"/ map.insert(\"poneyland\", 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203758,"byte_end":203790,"line_start":3209,"line_end":3209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203795,"byte_end":203798,"line_start":3210,"line_end":3210,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203803,"byte_end":203849,"line_start":3211,"line_end":3211,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203854,"byte_end":203885,"line_start":3212,"line_end":3212,"column_start":5,"column_end":36}},{"value":"/         e.replace_entry_with(|k, v| {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203890,"byte_end":203931,"line_start":3213,"line_end":3213,"column_start":5,"column_end":46}},{"value":"/             assert_eq!(k, &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203936,"byte_end":203980,"line_start":3214,"line_end":3214,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(v, 42);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":203985,"byte_end":204019,"line_start":3215,"line_end":3215,"column_start":5,"column_end":39}},{"value":"/             Some(v + 1)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204024,"byte_end":204051,"line_start":3216,"line_end":3216,"column_start":5,"column_end":32}},{"value":"/         })","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204056,"byte_end":204070,"line_start":3217,"line_end":3217,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204075,"byte_end":204084,"line_start":3218,"line_end":3218,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204089,"byte_end":204126,"line_start":3219,"line_end":3219,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204131,"byte_end":204137,"line_start":3220,"line_end":3220,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204142,"byte_end":204145,"line_start":3221,"line_end":3221,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204150,"byte_end":204167,"line_start":3222,"line_end":3222,"column_start":5,"column_end":22}},{"value":"/     Entry::Occupied(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204172,"byte_end":204203,"line_start":3223,"line_end":3223,"column_start":5,"column_end":36}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204208,"byte_end":204254,"line_start":3224,"line_end":3224,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(e.get(), &43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204259,"byte_end":204296,"line_start":3225,"line_end":3225,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204301,"byte_end":204310,"line_start":3226,"line_end":3226,"column_start":5,"column_end":14}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204315,"byte_end":204352,"line_start":3227,"line_end":3227,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204357,"byte_end":204362,"line_start":3228,"line_end":3228,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204367,"byte_end":204370,"line_start":3229,"line_end":3229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204375,"byte_end":204412,"line_start":3230,"line_end":3230,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204417,"byte_end":204420,"line_start":3231,"line_end":3231,"column_start":5,"column_end":8}},{"value":"/ let entry = match map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204425,"byte_end":204471,"line_start":3232,"line_end":3232,"column_start":5,"column_end":51}},{"value":"/     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204476,"byte_end":204542,"line_start":3233,"line_end":3233,"column_start":5,"column_end":71}},{"value":"/     Entry::Vacant(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204547,"byte_end":204584,"line_start":3234,"line_end":3234,"column_start":5,"column_end":42}},{"value":"/ };","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204589,"byte_end":204595,"line_start":3235,"line_end":3235,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204600,"byte_end":204603,"line_start":3236,"line_end":3236,"column_start":5,"column_end":8}},{"value":"/ match entry {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204608,"byte_end":204625,"line_start":3237,"line_end":3237,"column_start":5,"column_end":22}},{"value":"/     Entry::Vacant(e) => {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204630,"byte_end":204659,"line_start":3238,"line_end":3238,"column_start":5,"column_end":34}},{"value":"/         assert_eq!(e.key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204664,"byte_end":204710,"line_start":3239,"line_end":3239,"column_start":5,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204715,"byte_end":204724,"line_start":3240,"line_end":3240,"column_start":5,"column_end":14}},{"value":"/     Entry::Occupied(_) => panic!(),","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204729,"byte_end":204768,"line_start":3241,"line_end":3241,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204773,"byte_end":204778,"line_start":3242,"line_end":3242,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204783,"byte_end":204786,"line_start":3243,"line_end":3243,"column_start":5,"column_end":8}},{"value":"/ assert!(!map.contains_key(\"poneyland\"));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204791,"byte_end":204835,"line_start":3244,"line_end":3244,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204840,"byte_end":204847,"line_start":3245,"line_end":3245,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":204888,"byte_end":204894,"line_start":3246,"line_end":3246,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206217,"byte_end":206220,"line_start":3291,"line_end":3291,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"pub fn key(&Self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205827,"byte_end":205900,"line_start":3279,"line_end":3279,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205905,"byte_end":205935,"line_start":3280,"line_end":3280,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205940,"byte_end":205943,"line_start":3281,"line_end":3281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205948,"byte_end":205962,"line_start":3282,"line_end":3282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205967,"byte_end":205970,"line_start":3283,"line_end":3283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205975,"byte_end":205982,"line_start":3284,"line_end":3284,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205987,"byte_end":206014,"line_start":3285,"line_end":3285,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206019,"byte_end":206022,"line_start":3286,"line_end":3286,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206027,"byte_end":206080,"line_start":3287,"line_end":3287,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206085,"byte_end":206144,"line_start":3288,"line_end":3288,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206149,"byte_end":206156,"line_start":3289,"line_end":3289,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206197,"byte_end":206203,"line_start":3290,"line_end":3290,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206656,"byte_end":206664,"line_start":3310,"line_end":3310,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"pub fn into_key(Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206265,"byte_end":206295,"line_start":3295,"line_end":3295,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206300,"byte_end":206303,"line_start":3296,"line_end":3296,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206308,"byte_end":206322,"line_start":3297,"line_end":3297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206327,"byte_end":206330,"line_start":3298,"line_end":3298,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206335,"byte_end":206342,"line_start":3299,"line_end":3299,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206347,"byte_end":206374,"line_start":3300,"line_end":3300,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206379,"byte_end":206414,"line_start":3301,"line_end":3301,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206419,"byte_end":206422,"line_start":3302,"line_end":3302,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206427,"byte_end":206480,"line_start":3303,"line_end":3303,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206485,"byte_end":206488,"line_start":3304,"line_end":3304,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206493,"byte_end":206547,"line_start":3305,"line_end":3305,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206552,"byte_end":206573,"line_start":3306,"line_end":3306,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206578,"byte_end":206583,"line_start":3307,"line_end":3307,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206588,"byte_end":206595,"line_start":3308,"line_end":3308,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206636,"byte_end":206642,"line_start":3309,"line_end":3309,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207215,"byte_end":207221,"line_start":3331,"line_end":3331,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"pub fn insert(Self, V) -> &'a mut V where K: Hash, S: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206706,"byte_end":206765,"line_start":3314,"line_end":3314,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206770,"byte_end":206812,"line_start":3315,"line_end":3315,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206817,"byte_end":206820,"line_start":3316,"line_end":3316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206825,"byte_end":206839,"line_start":3317,"line_end":3317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206844,"byte_end":206847,"line_start":3318,"line_end":3318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206852,"byte_end":206859,"line_start":3319,"line_end":3319,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206864,"byte_end":206891,"line_start":3320,"line_end":3320,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206896,"byte_end":206931,"line_start":3321,"line_end":3321,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206936,"byte_end":206939,"line_start":3322,"line_end":3322,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":206944,"byte_end":206997,"line_start":3323,"line_end":3323,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207002,"byte_end":207005,"line_start":3324,"line_end":3324,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207010,"byte_end":207064,"line_start":3325,"line_end":3325,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207069,"byte_end":207090,"line_start":3326,"line_end":3326,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207095,"byte_end":207100,"line_start":3327,"line_end":3327,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207105,"byte_end":207142,"line_start":3328,"line_end":3328,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207147,"byte_end":207154,"line_start":3329,"line_end":3329,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":207195,"byte_end":207201,"line_start":3330,"line_end":3330,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256818,"byte_end":256825,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1579}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253446,"byte_end":253512,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253513,"byte_end":253516,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253517,"byte_end":253589,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253590,"byte_end":253670,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253671,"byte_end":253747,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253748,"byte_end":253802,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253803,"byte_end":253806,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253807,"byte_end":253818,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253819,"byte_end":253855,"line_start":28,"line_end":28,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253856,"byte_end":253863,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253864,"byte_end":253867,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253868,"byte_end":253938,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253939,"byte_end":253942,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253943,"byte_end":253946,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":253947,"byte_end":254020,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254021,"byte_end":254094,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254095,"byte_end":254170,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254171,"byte_end":254250,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254251,"byte_end":254267,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254268,"byte_end":254271,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254272,"byte_end":254351,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254352,"byte_end":254430,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254431,"byte_end":254511,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254512,"byte_end":254557,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254558,"byte_end":254561,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254562,"byte_end":254576,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254577,"byte_end":254580,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254581,"byte_end":254588,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254589,"byte_end":254616,"line_start":48,"line_end":48,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254617,"byte_end":254685,"line_start":49,"line_end":49,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254686,"byte_end":254737,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254738,"byte_end":254773,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254774,"byte_end":254777,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254778,"byte_end":254800,"line_start":53,"line_end":53,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254801,"byte_end":254854,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254855,"byte_end":254909,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254910,"byte_end":254954,"line_start":56,"line_end":56,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":254955,"byte_end":255004,"line_start":57,"line_end":57,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255005,"byte_end":255008,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255009,"byte_end":255041,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255042,"byte_end":255089,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255090,"byte_end":255162,"line_start":61,"line_end":61,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255163,"byte_end":255193,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255194,"byte_end":255199,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255200,"byte_end":255203,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255204,"byte_end":255225,"line_start":65,"line_end":65,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255226,"byte_end":255258,"line_start":66,"line_end":66,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255259,"byte_end":255262,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255263,"byte_end":255294,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255295,"byte_end":255319,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255320,"byte_end":255349,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255350,"byte_end":255355,"line_start":71,"line_end":71,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255356,"byte_end":255363,"line_start":72,"line_end":72,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255364,"byte_end":255367,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255368,"byte_end":255436,"line_start":74,"line_end":74,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`]. This will in the","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255437,"byte_end":255513,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255514,"byte_end":255546,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255547,"byte_end":255550,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255551,"byte_end":255558,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255559,"byte_end":255586,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255587,"byte_end":255628,"line_start":80,"line_end":80,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255629,"byte_end":255648,"line_start":81,"line_end":81,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255649,"byte_end":255670,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255671,"byte_end":255692,"line_start":83,"line_end":83,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255693,"byte_end":255698,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255699,"byte_end":255702,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255703,"byte_end":255740,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255741,"byte_end":255744,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255745,"byte_end":255812,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255813,"byte_end":255880,"line_start":89,"line_end":89,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255881,"byte_end":255947,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":255948,"byte_end":256016,"line_start":91,"line_end":91,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256017,"byte_end":256020,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256021,"byte_end":256076,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256077,"byte_end":256100,"line_start":94,"line_end":94,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256101,"byte_end":256129,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256130,"byte_end":256135,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256136,"byte_end":256143,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256144,"byte_end":256147,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256148,"byte_end":256225,"line_start":99,"line_end":99,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256226,"byte_end":256229,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256230,"byte_end":256237,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256238,"byte_end":256265,"line_start":102,"line_end":102,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256266,"byte_end":256269,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256270,"byte_end":256315,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256316,"byte_end":256380,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256381,"byte_end":256420,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256421,"byte_end":256428,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256429,"byte_end":256432,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256433,"byte_end":256498,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256499,"byte_end":256558,"line_start":110,"line_end":110,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256559,"byte_end":256623,"line_start":111,"line_end":111,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256624,"byte_end":256660,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256661,"byte_end":256734,"line_start":113,"line_end":113,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256735,"byte_end":256806,"line_start":114,"line_end":114,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257643,"byte_end":257646,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257275,"byte_end":257306,"line_start":133,"line_end":133,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257311,"byte_end":257314,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257319,"byte_end":257411,"line_start":135,"line_end":135,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257416,"byte_end":257443,"line_start":136,"line_end":136,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257448,"byte_end":257451,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257456,"byte_end":257470,"line_start":138,"line_end":138,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257475,"byte_end":257478,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257483,"byte_end":257490,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257495,"byte_end":257522,"line_start":141,"line_end":141,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257527,"byte_end":257570,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257575,"byte_end":257582,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257623,"byte_end":257629,"line_start":144,"line_end":144,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1589},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258199,"byte_end":258212,"line_start":164,"line_end":164,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257728,"byte_end":257787,"line_start":151,"line_end":151,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257792,"byte_end":257795,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257800,"byte_end":257874,"line_start":153,"line_end":153,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257879,"byte_end":257948,"line_start":154,"line_end":154,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257953,"byte_end":257956,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257961,"byte_end":257975,"line_start":156,"line_end":156,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257980,"byte_end":257983,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257988,"byte_end":257995,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258000,"byte_end":258027,"line_start":159,"line_end":159,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258032,"byte_end":258087,"line_start":160,"line_end":160,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258092,"byte_end":258126,"line_start":161,"line_end":161,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258131,"byte_end":258138,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258179,"byte_end":258185,"line_start":163,"line_end":163,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258800,"byte_end":258806,"line_start":185,"line_end":185,"column_start":12,"column_end":18},"name":"new_in","qualname":"<HashSet<T, DefaultHashBuilder, A>>::new_in","value":"pub fn new_in(A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258432,"byte_end":258463,"line_start":173,"line_end":173,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258468,"byte_end":258471,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The hash set is initially created with a capacity of 0, so it will not allocate until it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258476,"byte_end":258568,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/ is first inserted into.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258573,"byte_end":258600,"line_start":176,"line_end":176,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258605,"byte_end":258608,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258613,"byte_end":258627,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258632,"byte_end":258635,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258640,"byte_end":258647,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258652,"byte_end":258679,"line_start":181,"line_end":181,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258684,"byte_end":258727,"line_start":182,"line_end":182,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258732,"byte_end":258739,"line_start":183,"line_end":183,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258780,"byte_end":258786,"line_start":184,"line_end":184,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259375,"byte_end":259391,"line_start":204,"line_end":204,"column_start":12,"column_end":28},"name":"with_capacity_in","qualname":"<HashSet<T, DefaultHashBuilder, A>>::with_capacity_in","value":"pub fn with_capacity_in(usize, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258904,"byte_end":258963,"line_start":191,"line_end":191,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258968,"byte_end":258971,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258976,"byte_end":259050,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259055,"byte_end":259124,"line_start":194,"line_end":194,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259129,"byte_end":259132,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259137,"byte_end":259151,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259156,"byte_end":259159,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259164,"byte_end":259171,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259176,"byte_end":259203,"line_start":199,"line_end":199,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259208,"byte_end":259263,"line_start":200,"line_end":200,"column_start":5,"column_end":60}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259268,"byte_end":259302,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259307,"byte_end":259314,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259355,"byte_end":259361,"line_start":203,"line_end":203,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259906,"byte_end":259914,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S, A>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259580,"byte_end":259653,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259658,"byte_end":259661,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259666,"byte_end":259680,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259685,"byte_end":259688,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259693,"byte_end":259700,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259705,"byte_end":259732,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259737,"byte_end":259793,"line_start":218,"line_end":218,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259798,"byte_end":259833,"line_start":219,"line_end":219,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259838,"byte_end":259845,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259886,"byte_end":259892,"line_start":221,"line_end":221,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260439,"byte_end":260443,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S, A>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259972,"byte_end":260029,"line_start":226,"line_end":226,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260034,"byte_end":260075,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260080,"byte_end":260083,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260088,"byte_end":260102,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260107,"byte_end":260110,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260115,"byte_end":260122,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260127,"byte_end":260154,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260159,"byte_end":260192,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260197,"byte_end":260217,"line_start":234,"line_end":234,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260222,"byte_end":260242,"line_start":235,"line_end":235,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260247,"byte_end":260250,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260255,"byte_end":260295,"line_start":237,"line_end":237,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260300,"byte_end":260325,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260330,"byte_end":260356,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260361,"byte_end":260366,"line_start":240,"line_end":240,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260371,"byte_end":260378,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260419,"byte_end":260425,"line_start":242,"line_end":242,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260866,"byte_end":260869,"line_start":262,"line_end":262,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S, A>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260539,"byte_end":260585,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260590,"byte_end":260593,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260598,"byte_end":260612,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260617,"byte_end":260620,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260625,"byte_end":260632,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260637,"byte_end":260664,"line_start":254,"line_end":254,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260669,"byte_end":260672,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260677,"byte_end":260708,"line_start":256,"line_end":256,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260713,"byte_end":260740,"line_start":257,"line_end":257,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260745,"byte_end":260761,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260766,"byte_end":260793,"line_start":259,"line_end":259,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260798,"byte_end":260805,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260846,"byte_end":260852,"line_start":261,"line_end":261,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261253,"byte_end":261261,"line_start":279,"line_end":279,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S, A>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260922,"byte_end":260973,"line_start":266,"line_end":266,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260978,"byte_end":260981,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":260986,"byte_end":261000,"line_start":268,"line_end":268,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261005,"byte_end":261008,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261013,"byte_end":261020,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261025,"byte_end":261052,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261057,"byte_end":261060,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261065,"byte_end":261096,"line_start":273,"line_end":273,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261101,"byte_end":261127,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261132,"byte_end":261148,"line_start":275,"line_end":275,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261153,"byte_end":261180,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261185,"byte_end":261192,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261233,"byte_end":261239,"line_start":278,"line_end":278,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261809,"byte_end":261814,"line_start":301,"line_end":301,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S, A>>::drain","value":"pub fn drain(&mut Self) -> Drain<, T, A>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261318,"byte_end":261376,"line_start":283,"line_end":283,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261381,"byte_end":261384,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261389,"byte_end":261403,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261408,"byte_end":261411,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261416,"byte_end":261423,"line_start":287,"line_end":287,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261428,"byte_end":261455,"line_start":288,"line_end":288,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261460,"byte_end":261463,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261468,"byte_end":261534,"line_start":290,"line_end":290,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261539,"byte_end":261568,"line_start":291,"line_end":291,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261573,"byte_end":261576,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261581,"byte_end":261623,"line_start":293,"line_end":293,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261628,"byte_end":261654,"line_start":294,"line_end":294,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261659,"byte_end":261685,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261690,"byte_end":261695,"line_start":296,"line_end":296,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261700,"byte_end":261703,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261708,"byte_end":261736,"line_start":298,"line_end":298,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261741,"byte_end":261748,"line_start":299,"line_end":299,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261789,"byte_end":261795,"line_start":300,"line_end":300,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262348,"byte_end":262354,"line_start":321,"line_end":321,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S, A>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261920,"byte_end":261977,"line_start":307,"line_end":307,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261982,"byte_end":261985,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":261990,"byte_end":262068,"line_start":309,"line_end":309,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262073,"byte_end":262076,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262081,"byte_end":262095,"line_start":311,"line_end":311,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262100,"byte_end":262103,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262108,"byte_end":262115,"line_start":313,"line_end":313,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262120,"byte_end":262147,"line_start":314,"line_end":314,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262152,"byte_end":262155,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262160,"byte_end":262187,"line_start":316,"line_end":316,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262192,"byte_end":262253,"line_start":317,"line_end":317,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262258,"byte_end":262290,"line_start":318,"line_end":318,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262295,"byte_end":262324,"line_start":319,"line_end":319,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262329,"byte_end":262336,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263424,"byte_end":263436,"line_start":354,"line_end":354,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S, A>>::drain_filter","value":"pub fn drain_filter<F>(&mut Self, F) -> DrainFilter<, T, F, A> where\nF: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are true under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are true under the given predicate,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262474,"byte_end":262535,"line_start":328,"line_end":328,"column_start":5,"column_end":66}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262540,"byte_end":262591,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262596,"byte_end":262599,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `true` out","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262604,"byte_end":262682,"line_start":331,"line_end":331,"column_start":5,"column_end":83}},{"value":"/ into another iterator.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262687,"byte_end":262713,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262718,"byte_end":262721,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, any remaining elements that satisfy","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262726,"byte_end":262809,"line_start":334,"line_end":334,"column_start":5,"column_end":88}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262814,"byte_end":262857,"line_start":335,"line_end":335,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262862,"byte_end":262865,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262870,"byte_end":262884,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262889,"byte_end":262892,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262897,"byte_end":262904,"line_start":339,"line_end":339,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262909,"byte_end":262936,"line_start":340,"line_end":340,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262941,"byte_end":262944,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":262949,"byte_end":262998,"line_start":342,"line_end":342,"column_start":5,"column_end":54}},{"value":"/ let drained: HashSet<i32> = set.drain_filter(|v| v % 2 == 0).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263003,"byte_end":263078,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263083,"byte_end":263086,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ let mut evens = drained.into_iter().collect::<Vec<_>>();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263091,"byte_end":263151,"line_start":345,"line_end":345,"column_start":5,"column_end":65}},{"value":"/ let mut odds = set.into_iter().collect::<Vec<_>>();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263156,"byte_end":263211,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/ evens.sort();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263216,"byte_end":263233,"line_start":347,"line_end":347,"column_start":5,"column_end":22}},{"value":"/ odds.sort();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263238,"byte_end":263254,"line_start":348,"line_end":348,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263259,"byte_end":263262,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(evens, vec![0, 2, 4, 6]);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263267,"byte_end":263307,"line_start":350,"line_end":350,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(odds, vec![1, 3, 5, 7]);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263312,"byte_end":263351,"line_start":351,"line_end":351,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263356,"byte_end":263363,"line_start":352,"line_end":352,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263404,"byte_end":263410,"line_start":353,"line_end":353,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264049,"byte_end":264054,"line_start":380,"line_end":380,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S, A>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263742,"byte_end":263782,"line_start":367,"line_end":367,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263787,"byte_end":263790,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263795,"byte_end":263809,"line_start":369,"line_end":369,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263814,"byte_end":263817,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263822,"byte_end":263829,"line_start":371,"line_end":371,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263834,"byte_end":263861,"line_start":372,"line_end":372,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263866,"byte_end":263869,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263874,"byte_end":263905,"line_start":374,"line_end":374,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263910,"byte_end":263926,"line_start":375,"line_end":375,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263931,"byte_end":263945,"line_start":376,"line_end":376,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263950,"byte_end":263976,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":263981,"byte_end":263988,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264029,"byte_end":264035,"line_start":379,"line_end":379,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265159,"byte_end":265170,"line_start":413,"line_end":413,"column_start":18,"column_end":29},"name":"with_hasher","qualname":"<HashSet<T, S, Global>>::with_hasher","value":"pub const fn with_hasher(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264141,"byte_end":264213,"line_start":386,"line_end":386,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264218,"byte_end":264227,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264232,"byte_end":264235,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264240,"byte_end":264307,"line_start":389,"line_end":389,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264312,"byte_end":264315,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264320,"byte_end":264377,"line_start":391,"line_end":391,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264382,"byte_end":264449,"line_start":392,"line_end":392,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264454,"byte_end":264517,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264522,"byte_end":264586,"line_start":394,"line_end":394,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264591,"byte_end":264594,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264599,"byte_end":264675,"line_start":396,"line_end":396,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264680,"byte_end":264744,"line_start":397,"line_end":397,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264749,"byte_end":264752,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264757,"byte_end":264760,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264765,"byte_end":264779,"line_start":400,"line_end":400,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264784,"byte_end":264787,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264792,"byte_end":264799,"line_start":402,"line_end":402,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264804,"byte_end":264831,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264836,"byte_end":264884,"line_start":404,"line_end":404,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264889,"byte_end":264892,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264897,"byte_end":264939,"line_start":406,"line_end":406,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264944,"byte_end":264986,"line_start":407,"line_end":407,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264991,"byte_end":265009,"line_start":408,"line_end":408,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265014,"byte_end":265021,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265026,"byte_end":265029,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265034,"byte_end":265092,"line_start":411,"line_end":411,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265133,"byte_end":265139,"line_start":412,"line_end":412,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266391,"byte_end":266415,"line_start":446,"line_end":446,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S, Global>>::with_capacity_and_hasher","value":"pub fn with_capacity_and_hasher(usize, S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265275,"byte_end":265340,"line_start":419,"line_end":419,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265345,"byte_end":265375,"line_start":420,"line_end":420,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265380,"byte_end":265383,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265388,"byte_end":265462,"line_start":422,"line_end":422,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265467,"byte_end":265536,"line_start":423,"line_end":423,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265541,"byte_end":265544,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265549,"byte_end":265606,"line_start":425,"line_end":425,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265611,"byte_end":265678,"line_start":426,"line_end":426,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265683,"byte_end":265746,"line_start":427,"line_end":427,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265751,"byte_end":265815,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265820,"byte_end":265823,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265828,"byte_end":265904,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265909,"byte_end":265973,"line_start":431,"line_end":431,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265978,"byte_end":265981,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":265986,"byte_end":266000,"line_start":433,"line_end":433,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266005,"byte_end":266008,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266013,"byte_end":266020,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266025,"byte_end":266052,"line_start":436,"line_end":436,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266057,"byte_end":266105,"line_start":437,"line_end":437,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266110,"byte_end":266113,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266118,"byte_end":266160,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266165,"byte_end":266224,"line_start":440,"line_end":440,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266229,"byte_end":266247,"line_start":441,"line_end":441,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266252,"byte_end":266259,"line_start":442,"line_end":442,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266264,"byte_end":266267,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266272,"byte_end":266330,"line_start":444,"line_end":444,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266371,"byte_end":266377,"line_start":445,"line_end":445,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267402,"byte_end":267416,"line_start":478,"line_end":478,"column_start":12,"column_end":26},"name":"with_hasher_in","qualname":"<HashSet<T, S, A>>::with_hasher_in","value":"pub fn with_hasher_in(S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266627,"byte_end":266699,"line_start":457,"line_end":457,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266704,"byte_end":266713,"line_start":458,"line_end":458,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266718,"byte_end":266721,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266726,"byte_end":266793,"line_start":460,"line_end":460,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266798,"byte_end":266801,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266806,"byte_end":266863,"line_start":462,"line_end":462,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266868,"byte_end":266935,"line_start":463,"line_end":463,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266940,"byte_end":267003,"line_start":464,"line_end":464,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267008,"byte_end":267072,"line_start":465,"line_end":465,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267077,"byte_end":267080,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267085,"byte_end":267099,"line_start":467,"line_end":467,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267104,"byte_end":267107,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267112,"byte_end":267119,"line_start":469,"line_end":469,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267124,"byte_end":267151,"line_start":470,"line_end":470,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267156,"byte_end":267204,"line_start":471,"line_end":471,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267209,"byte_end":267212,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267217,"byte_end":267259,"line_start":473,"line_end":473,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267264,"byte_end":267306,"line_start":474,"line_end":474,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267311,"byte_end":267329,"line_start":475,"line_end":475,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267334,"byte_end":267341,"line_start":476,"line_end":476,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267382,"byte_end":267388,"line_start":477,"line_end":477,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268428,"byte_end":268455,"line_start":506,"line_end":506,"column_start":12,"column_end":39},"name":"with_capacity_and_hasher_in","qualname":"<HashSet<T, S, A>>::with_capacity_and_hasher_in","value":"pub fn with_capacity_and_hasher_in(usize, S, A) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267541,"byte_end":267606,"line_start":484,"line_end":484,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267611,"byte_end":267641,"line_start":485,"line_end":485,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267646,"byte_end":267649,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267654,"byte_end":267728,"line_start":487,"line_end":487,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267733,"byte_end":267802,"line_start":488,"line_end":488,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267807,"byte_end":267810,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267815,"byte_end":267872,"line_start":490,"line_end":490,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267877,"byte_end":267944,"line_start":491,"line_end":491,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":267949,"byte_end":268012,"line_start":492,"line_end":492,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268017,"byte_end":268081,"line_start":493,"line_end":493,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268086,"byte_end":268089,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268094,"byte_end":268108,"line_start":495,"line_end":495,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268113,"byte_end":268116,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268121,"byte_end":268128,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268133,"byte_end":268160,"line_start":498,"line_end":498,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268165,"byte_end":268213,"line_start":499,"line_end":499,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268218,"byte_end":268221,"line_start":500,"line_end":500,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268226,"byte_end":268268,"line_start":501,"line_end":501,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268273,"byte_end":268332,"line_start":502,"line_end":502,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268337,"byte_end":268355,"line_start":503,"line_end":503,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268360,"byte_end":268367,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268408,"byte_end":268414,"line_start":505,"line_end":505,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269147,"byte_end":269153,"line_start":527,"line_end":527,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S, A>>::hasher","value":"pub fn hasher(&Self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268620,"byte_end":268673,"line_start":512,"line_end":512,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268678,"byte_end":268681,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268686,"byte_end":268764,"line_start":514,"line_end":514,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268769,"byte_end":268772,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268777,"byte_end":268791,"line_start":516,"line_end":516,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268796,"byte_end":268799,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268804,"byte_end":268811,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268816,"byte_end":268843,"line_start":519,"line_end":519,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268848,"byte_end":268896,"line_start":520,"line_end":520,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268901,"byte_end":268904,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268909,"byte_end":268956,"line_start":522,"line_end":522,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":268961,"byte_end":269018,"line_start":523,"line_end":523,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269023,"byte_end":269074,"line_start":524,"line_end":524,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269079,"byte_end":269086,"line_start":525,"line_end":525,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269127,"byte_end":269133,"line_start":526,"line_end":526,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1626},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269854,"byte_end":269861,"line_start":555,"line_end":555,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S, A>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269311,"byte_end":269387,"line_start":538,"line_end":538,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269392,"byte_end":269460,"line_start":539,"line_end":539,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269465,"byte_end":269492,"line_start":540,"line_end":540,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269497,"byte_end":269500,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269505,"byte_end":269517,"line_start":542,"line_end":542,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269522,"byte_end":269525,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269530,"byte_end":269586,"line_start":544,"line_end":544,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269591,"byte_end":269594,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269599,"byte_end":269613,"line_start":546,"line_end":546,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269618,"byte_end":269621,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269626,"byte_end":269633,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269638,"byte_end":269665,"line_start":549,"line_end":549,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269670,"byte_end":269717,"line_start":550,"line_end":550,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269722,"byte_end":269742,"line_start":551,"line_end":551,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269747,"byte_end":269781,"line_start":552,"line_end":552,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269786,"byte_end":269793,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269834,"byte_end":269840,"line_start":554,"line_end":554,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270568,"byte_end":270579,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S, A>>::try_reserve","value":"pub fn try_reserve(&mut Self, usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269942,"byte_end":270026,"line_start":559,"line_end":559,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270031,"byte_end":270110,"line_start":560,"line_end":560,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270115,"byte_end":270142,"line_start":561,"line_end":561,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270147,"byte_end":270150,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270155,"byte_end":270167,"line_start":563,"line_end":563,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270172,"byte_end":270175,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270180,"byte_end":270260,"line_start":565,"line_end":565,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270265,"byte_end":270281,"line_start":566,"line_end":566,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270286,"byte_end":270289,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270294,"byte_end":270308,"line_start":568,"line_end":568,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270313,"byte_end":270316,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270321,"byte_end":270328,"line_start":570,"line_end":570,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270333,"byte_end":270360,"line_start":571,"line_end":571,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270365,"byte_end":270412,"line_start":572,"line_end":572,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270417,"byte_end":270495,"line_start":573,"line_end":573,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270500,"byte_end":270507,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270548,"byte_end":270554,"line_start":575,"line_end":575,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271276,"byte_end":271289,"line_start":597,"line_end":597,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S, A>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270695,"byte_end":270764,"line_start":580,"line_end":580,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270769,"byte_end":270834,"line_start":581,"line_end":581,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270839,"byte_end":270912,"line_start":582,"line_end":582,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270917,"byte_end":270920,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270925,"byte_end":270939,"line_start":584,"line_end":584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270944,"byte_end":270947,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270952,"byte_end":270959,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270964,"byte_end":270991,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":270996,"byte_end":270999,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271004,"byte_end":271050,"line_start":589,"line_end":589,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271055,"byte_end":271073,"line_start":590,"line_end":590,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271078,"byte_end":271096,"line_start":591,"line_end":591,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271101,"byte_end":271136,"line_start":592,"line_end":592,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271141,"byte_end":271165,"line_start":593,"line_end":593,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271170,"byte_end":271203,"line_start":594,"line_end":594,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271208,"byte_end":271215,"line_start":595,"line_end":595,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271256,"byte_end":271262,"line_start":596,"line_end":596,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272105,"byte_end":272114,"line_start":623,"line_end":623,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S, A>>::shrink_to","value":"pub fn shrink_to(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271347,"byte_end":271415,"line_start":601,"line_end":601,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271420,"byte_end":271498,"line_start":602,"line_end":602,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271503,"byte_end":271576,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271581,"byte_end":271584,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271589,"byte_end":271652,"line_start":605,"line_end":605,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271657,"byte_end":271678,"line_start":606,"line_end":606,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271683,"byte_end":271686,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271691,"byte_end":271705,"line_start":608,"line_end":608,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271710,"byte_end":271713,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271718,"byte_end":271725,"line_start":610,"line_end":610,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271730,"byte_end":271757,"line_start":611,"line_end":611,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271762,"byte_end":271765,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271770,"byte_end":271816,"line_start":613,"line_end":613,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271821,"byte_end":271839,"line_start":614,"line_end":614,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271844,"byte_end":271862,"line_start":615,"line_end":615,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271867,"byte_end":271902,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271907,"byte_end":271929,"line_start":617,"line_end":617,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271934,"byte_end":271968,"line_start":618,"line_end":618,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271973,"byte_end":271994,"line_start":619,"line_end":619,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":271999,"byte_end":272032,"line_start":620,"line_end":620,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272037,"byte_end":272044,"line_start":621,"line_end":621,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272085,"byte_end":272091,"line_start":622,"line_end":622,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273056,"byte_end":273066,"line_start":651,"line_end":651,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S, A>>::difference","value":"pub fn difference<'a>(&'a Self, &'a Self) -> Difference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272201,"byte_end":272251,"line_start":627,"line_end":627,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272256,"byte_end":272315,"line_start":628,"line_end":628,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272320,"byte_end":272323,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272328,"byte_end":272342,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272347,"byte_end":272350,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272355,"byte_end":272362,"line_start":632,"line_end":632,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272367,"byte_end":272394,"line_start":633,"line_end":633,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272399,"byte_end":272459,"line_start":634,"line_end":634,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272464,"byte_end":272527,"line_start":635,"line_end":635,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272532,"byte_end":272535,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272540,"byte_end":272570,"line_start":637,"line_end":637,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272575,"byte_end":272606,"line_start":638,"line_end":638,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272611,"byte_end":272648,"line_start":639,"line_end":639,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272653,"byte_end":272658,"line_start":640,"line_end":640,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272663,"byte_end":272666,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272671,"byte_end":272725,"line_start":642,"line_end":642,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272730,"byte_end":272773,"line_start":643,"line_end":643,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272778,"byte_end":272781,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272786,"byte_end":272831,"line_start":645,"line_end":645,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272836,"byte_end":272876,"line_start":646,"line_end":646,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272881,"byte_end":272935,"line_start":647,"line_end":647,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272940,"byte_end":272983,"line_start":648,"line_end":648,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":272988,"byte_end":272995,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273036,"byte_end":273042,"line_start":650,"line_end":650,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1632},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274018,"byte_end":274038,"line_start":680,"line_end":680,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S, A>>::symmetric_difference","value":"pub fn symmetric_difference<'a>(&'a Self, &'a Self) -> SymmetricDifference","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273219,"byte_end":273279,"line_start":658,"line_end":658,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273284,"byte_end":273354,"line_start":659,"line_end":659,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273359,"byte_end":273362,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273367,"byte_end":273381,"line_start":661,"line_end":661,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273386,"byte_end":273389,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273394,"byte_end":273401,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273406,"byte_end":273433,"line_start":664,"line_end":664,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273438,"byte_end":273498,"line_start":665,"line_end":665,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273503,"byte_end":273566,"line_start":666,"line_end":666,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273571,"byte_end":273574,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273579,"byte_end":273616,"line_start":668,"line_end":668,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273621,"byte_end":273662,"line_start":669,"line_end":669,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273667,"byte_end":273693,"line_start":670,"line_end":670,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273698,"byte_end":273703,"line_start":671,"line_end":671,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273708,"byte_end":273711,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273716,"byte_end":273781,"line_start":673,"line_end":673,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273786,"byte_end":273851,"line_start":674,"line_end":674,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273856,"byte_end":273859,"line_start":675,"line_end":675,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273864,"byte_end":273893,"line_start":676,"line_end":676,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273898,"byte_end":273945,"line_start":677,"line_end":677,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273950,"byte_end":273957,"line_start":678,"line_end":678,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":273998,"byte_end":274004,"line_start":679,"line_end":679,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274895,"byte_end":274907,"line_start":705,"line_end":705,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S, A>>::intersection","value":"pub fn intersection<'a>(&'a Self, &'a Self) -> Intersection","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274231,"byte_end":274283,"line_start":686,"line_end":686,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274288,"byte_end":274345,"line_start":687,"line_end":687,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274350,"byte_end":274353,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274358,"byte_end":274372,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274377,"byte_end":274380,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274385,"byte_end":274392,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274397,"byte_end":274424,"line_start":692,"line_end":692,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274429,"byte_end":274489,"line_start":693,"line_end":693,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274494,"byte_end":274557,"line_start":694,"line_end":694,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274562,"byte_end":274565,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274570,"byte_end":274607,"line_start":696,"line_end":696,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274612,"byte_end":274645,"line_start":697,"line_end":697,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274650,"byte_end":274676,"line_start":698,"line_end":698,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274681,"byte_end":274686,"line_start":699,"line_end":699,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274691,"byte_end":274694,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274699,"byte_end":274763,"line_start":701,"line_end":701,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274768,"byte_end":274822,"line_start":702,"line_end":702,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274827,"byte_end":274834,"line_start":703,"line_end":703,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":274875,"byte_end":274881,"line_start":704,"line_end":704,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275868,"byte_end":275873,"line_start":736,"line_end":736,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S, A>>::union","value":"pub fn union<'a>(&'a Self, &'a Self) -> Union","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275218,"byte_end":275263,"line_start":717,"line_end":717,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275268,"byte_end":275334,"line_start":718,"line_end":718,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275339,"byte_end":275342,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275347,"byte_end":275361,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275366,"byte_end":275369,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275374,"byte_end":275381,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275386,"byte_end":275413,"line_start":723,"line_end":723,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275418,"byte_end":275478,"line_start":724,"line_end":724,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275483,"byte_end":275546,"line_start":725,"line_end":725,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275551,"byte_end":275554,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275559,"byte_end":275602,"line_start":727,"line_end":727,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275607,"byte_end":275633,"line_start":728,"line_end":728,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275638,"byte_end":275664,"line_start":729,"line_end":729,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275669,"byte_end":275674,"line_start":730,"line_end":730,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275679,"byte_end":275682,"line_start":731,"line_end":731,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275687,"byte_end":275737,"line_start":732,"line_end":732,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275742,"byte_end":275795,"line_start":733,"line_end":733,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275800,"byte_end":275807,"line_start":734,"line_end":734,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":275848,"byte_end":275854,"line_start":735,"line_end":735,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277031,"byte_end":277039,"line_start":768,"line_end":768,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S, A>>::contains","value":"pub fn contains<Q: ?Sized>(&Self, &Q) -> bool where T: Borrow<Q>, Q: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276351,"byte_end":276398,"line_start":749,"line_end":749,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276403,"byte_end":276406,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276411,"byte_end":276478,"line_start":751,"line_end":751,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276483,"byte_end":276550,"line_start":752,"line_end":752,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276555,"byte_end":276574,"line_start":753,"line_end":753,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276579,"byte_end":276582,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276587,"byte_end":276601,"line_start":755,"line_end":755,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276606,"byte_end":276609,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276614,"byte_end":276621,"line_start":757,"line_end":757,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276626,"byte_end":276653,"line_start":758,"line_end":758,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276658,"byte_end":276661,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276666,"byte_end":276728,"line_start":760,"line_end":760,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276733,"byte_end":276772,"line_start":761,"line_end":761,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276777,"byte_end":276817,"line_start":762,"line_end":762,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276822,"byte_end":276829,"line_start":763,"line_end":763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276834,"byte_end":276837,"line_start":764,"line_end":764,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276842,"byte_end":276901,"line_start":765,"line_end":765,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":276906,"byte_end":276970,"line_start":766,"line_end":766,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277011,"byte_end":277017,"line_start":767,"line_end":767,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277901,"byte_end":277904,"line_start":795,"line_end":795,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S, A>>::get","value":"pub fn get<Q: ?Sized>(&Self, &Q) -> Option<&T> where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277185,"byte_end":277275,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277280,"byte_end":277283,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277288,"byte_end":277355,"line_start":778,"line_end":778,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277360,"byte_end":277427,"line_start":779,"line_end":779,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277432,"byte_end":277451,"line_start":780,"line_end":780,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277456,"byte_end":277459,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277464,"byte_end":277478,"line_start":782,"line_end":782,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277483,"byte_end":277486,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277491,"byte_end":277498,"line_start":784,"line_end":784,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277503,"byte_end":277530,"line_start":785,"line_end":785,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277535,"byte_end":277538,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277543,"byte_end":277605,"line_start":787,"line_end":787,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277610,"byte_end":277648,"line_start":788,"line_end":788,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277653,"byte_end":277687,"line_start":789,"line_end":789,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277692,"byte_end":277699,"line_start":790,"line_end":790,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277704,"byte_end":277707,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277712,"byte_end":277771,"line_start":792,"line_end":792,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277776,"byte_end":277840,"line_start":793,"line_end":793,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":277881,"byte_end":277887,"line_start":794,"line_end":794,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278733,"byte_end":278746,"line_start":822,"line_end":822,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S, A>>::get_or_insert","value":"pub fn get_or_insert(&mut Self, T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278196,"byte_end":278265,"line_start":807,"line_end":807,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278270,"byte_end":278318,"line_start":808,"line_end":808,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278323,"byte_end":278326,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278331,"byte_end":278345,"line_start":810,"line_end":810,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278350,"byte_end":278353,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278358,"byte_end":278365,"line_start":812,"line_end":812,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278370,"byte_end":278397,"line_start":813,"line_end":813,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278402,"byte_end":278405,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278410,"byte_end":278476,"line_start":815,"line_end":815,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278481,"byte_end":278510,"line_start":816,"line_end":816,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278515,"byte_end":278556,"line_start":817,"line_end":817,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278561,"byte_end":278606,"line_start":818,"line_end":818,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278611,"byte_end":278660,"line_start":819,"line_end":819,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278665,"byte_end":278672,"line_start":820,"line_end":820,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":278713,"byte_end":278719,"line_start":821,"line_end":821,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279737,"byte_end":279756,"line_start":851,"line_end":851,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S, A>>::get_or_insert_owned","value":"pub fn get_or_insert_owned<Q: ?Sized>(&mut Self, &Q) -> &T where T: Borrow<Q>,\nQ: Hash + Eq + ToOwned<Owned = T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279101,"byte_end":279173,"line_start":832,"line_end":832,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279178,"byte_end":279240,"line_start":833,"line_end":833,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279245,"byte_end":279248,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279253,"byte_end":279267,"line_start":835,"line_end":835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279272,"byte_end":279275,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279280,"byte_end":279287,"line_start":837,"line_end":837,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279292,"byte_end":279319,"line_start":838,"line_end":838,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279324,"byte_end":279327,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279332,"byte_end":279390,"line_start":840,"line_end":840,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279395,"byte_end":279448,"line_start":841,"line_end":841,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279453,"byte_end":279456,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279461,"byte_end":279490,"line_start":843,"line_end":843,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279495,"byte_end":279536,"line_start":844,"line_end":844,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279541,"byte_end":279590,"line_start":845,"line_end":845,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279595,"byte_end":279626,"line_start":846,"line_end":846,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279631,"byte_end":279636,"line_start":847,"line_end":847,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279641,"byte_end":279699,"line_start":848,"line_end":848,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279704,"byte_end":279711,"line_start":849,"line_end":849,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":279716,"byte_end":279725,"line_start":850,"line_end":850,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280913,"byte_end":280931,"line_start":884,"line_end":884,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S, A>>::get_or_insert_with","value":"pub fn get_or_insert_with<Q: ?Sized, F>(&mut Self, &Q, F) -> &T where\nT: Borrow<Q>, Q: Hash + Eq, F: FnOnce(&Q) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280222,"byte_end":280296,"line_start":865,"line_end":865,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280301,"byte_end":280367,"line_start":866,"line_end":866,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280372,"byte_end":280375,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280380,"byte_end":280394,"line_start":868,"line_end":868,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280399,"byte_end":280402,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280407,"byte_end":280414,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280419,"byte_end":280446,"line_start":871,"line_end":871,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280451,"byte_end":280454,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280459,"byte_end":280517,"line_start":873,"line_end":873,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280522,"byte_end":280575,"line_start":874,"line_end":874,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280580,"byte_end":280583,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280588,"byte_end":280617,"line_start":876,"line_end":876,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280622,"byte_end":280663,"line_start":877,"line_end":877,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280668,"byte_end":280731,"line_start":878,"line_end":878,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280736,"byte_end":280767,"line_start":879,"line_end":879,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280772,"byte_end":280777,"line_start":880,"line_end":880,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280782,"byte_end":280840,"line_start":881,"line_end":881,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280845,"byte_end":280852,"line_start":882,"line_end":882,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":280893,"byte_end":280899,"line_start":883,"line_end":883,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1650},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281937,"byte_end":281948,"line_start":916,"line_end":916,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S, A>>::is_disjoint","value":"pub fn is_disjoint(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281405,"byte_end":281473,"line_start":899,"line_end":899,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281478,"byte_end":281539,"line_start":900,"line_end":900,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281544,"byte_end":281547,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281552,"byte_end":281566,"line_start":902,"line_end":902,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281571,"byte_end":281574,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281579,"byte_end":281586,"line_start":904,"line_end":904,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281591,"byte_end":281618,"line_start":905,"line_end":905,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281623,"byte_end":281626,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281631,"byte_end":281691,"line_start":907,"line_end":907,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281696,"byte_end":281727,"line_start":908,"line_end":908,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281732,"byte_end":281735,"line_start":909,"line_end":909,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281740,"byte_end":281780,"line_start":910,"line_end":910,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281785,"byte_end":281801,"line_start":911,"line_end":911,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281806,"byte_end":281846,"line_start":912,"line_end":912,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281851,"byte_end":281867,"line_start":913,"line_end":913,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281872,"byte_end":281913,"line_start":914,"line_end":914,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":281918,"byte_end":281925,"line_start":915,"line_end":915,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1652},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282570,"byte_end":282579,"line_start":937,"line_end":937,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S, A>>::is_subset","value":"pub fn is_subset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282039,"byte_end":282092,"line_start":920,"line_end":920,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282097,"byte_end":282158,"line_start":921,"line_end":921,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282163,"byte_end":282166,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282171,"byte_end":282185,"line_start":923,"line_end":923,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282190,"byte_end":282193,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282198,"byte_end":282205,"line_start":925,"line_end":925,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282210,"byte_end":282237,"line_start":926,"line_end":926,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282242,"byte_end":282245,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282250,"byte_end":282312,"line_start":928,"line_end":928,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282317,"byte_end":282350,"line_start":929,"line_end":929,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282355,"byte_end":282358,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282363,"byte_end":282405,"line_start":931,"line_end":931,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282410,"byte_end":282428,"line_start":932,"line_end":932,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282433,"byte_end":282475,"line_start":933,"line_end":933,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282480,"byte_end":282498,"line_start":934,"line_end":934,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282503,"byte_end":282546,"line_start":935,"line_end":935,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282551,"byte_end":282558,"line_start":936,"line_end":936,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283323,"byte_end":283334,"line_start":962,"line_end":962,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S, A>>::is_superset","value":"pub fn is_superset(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282698,"byte_end":282753,"line_start":941,"line_end":941,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282758,"byte_end":282819,"line_start":942,"line_end":942,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282824,"byte_end":282827,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282832,"byte_end":282846,"line_start":944,"line_end":944,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282851,"byte_end":282854,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282859,"byte_end":282866,"line_start":946,"line_end":946,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282871,"byte_end":282898,"line_start":947,"line_end":947,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282903,"byte_end":282906,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282911,"byte_end":282970,"line_start":949,"line_end":949,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":282975,"byte_end":283008,"line_start":950,"line_end":950,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283013,"byte_end":283016,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283021,"byte_end":283066,"line_start":952,"line_end":952,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283071,"byte_end":283074,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283079,"byte_end":283097,"line_start":954,"line_end":954,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283102,"byte_end":283120,"line_start":955,"line_end":955,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283125,"byte_end":283170,"line_start":956,"line_end":956,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283175,"byte_end":283178,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283183,"byte_end":283201,"line_start":958,"line_end":958,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283206,"byte_end":283250,"line_start":959,"line_end":959,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283255,"byte_end":283262,"line_start":960,"line_end":960,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283303,"byte_end":283309,"line_start":961,"line_end":961,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1655},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283915,"byte_end":283921,"line_start":984,"line_end":984,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S, A>>::insert","value":"pub fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283407,"byte_end":283435,"line_start":966,"line_end":966,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283440,"byte_end":283443,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283448,"byte_end":283515,"line_start":968,"line_end":968,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283520,"byte_end":283523,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283528,"byte_end":283592,"line_start":970,"line_end":970,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283597,"byte_end":283600,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283605,"byte_end":283619,"line_start":972,"line_end":972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283624,"byte_end":283627,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283632,"byte_end":283639,"line_start":974,"line_end":974,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283644,"byte_end":283671,"line_start":975,"line_end":975,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283676,"byte_end":283679,"line_start":976,"line_end":976,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283684,"byte_end":283717,"line_start":977,"line_end":977,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283722,"byte_end":283725,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283730,"byte_end":283766,"line_start":979,"line_end":979,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283771,"byte_end":283808,"line_start":980,"line_end":980,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283813,"byte_end":283842,"line_start":981,"line_end":981,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283847,"byte_end":283854,"line_start":982,"line_end":982,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":283895,"byte_end":283901,"line_start":983,"line_end":983,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1656},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284556,"byte_end":284563,"line_start":1004,"line_end":1004,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S, A>>::replace","value":"pub fn replace(&mut Self, T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284009,"byte_end":284102,"line_start":988,"line_end":988,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284107,"byte_end":284143,"line_start":989,"line_end":989,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284148,"byte_end":284151,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284156,"byte_end":284170,"line_start":991,"line_end":991,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284175,"byte_end":284178,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284183,"byte_end":284190,"line_start":993,"line_end":993,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284195,"byte_end":284222,"line_start":994,"line_end":994,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284227,"byte_end":284230,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284235,"byte_end":284268,"line_start":996,"line_end":996,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284273,"byte_end":284307,"line_start":997,"line_end":997,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284312,"byte_end":284315,"line_start":998,"line_end":998,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284320,"byte_end":284376,"line_start":999,"line_end":999,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284381,"byte_end":284421,"line_start":1000,"line_end":1000,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284426,"byte_end":284483,"line_start":1001,"line_end":1001,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284488,"byte_end":284495,"line_start":1002,"line_end":1002,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284536,"byte_end":284542,"line_start":1003,"line_end":1003,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285571,"byte_end":285577,"line_start":1036,"line_end":1036,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S, A>>::remove","value":"pub fn remove<Q: ?Sized>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284849,"byte_end":284912,"line_start":1014,"line_end":1014,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284917,"byte_end":284940,"line_start":1015,"line_end":1015,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284945,"byte_end":284948,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":284953,"byte_end":285020,"line_start":1017,"line_end":1017,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285025,"byte_end":285092,"line_start":1018,"line_end":1018,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285097,"byte_end":285116,"line_start":1019,"line_end":1019,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285121,"byte_end":285124,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285129,"byte_end":285143,"line_start":1021,"line_end":1021,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285148,"byte_end":285151,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285156,"byte_end":285163,"line_start":1023,"line_end":1023,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285168,"byte_end":285195,"line_start":1024,"line_end":1024,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285200,"byte_end":285203,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285208,"byte_end":285241,"line_start":1026,"line_end":1026,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285246,"byte_end":285249,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285254,"byte_end":285272,"line_start":1028,"line_end":1028,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285277,"byte_end":285314,"line_start":1029,"line_end":1029,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285319,"byte_end":285357,"line_start":1030,"line_end":1030,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285362,"byte_end":285369,"line_start":1031,"line_end":1031,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285374,"byte_end":285377,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285382,"byte_end":285441,"line_start":1033,"line_end":1033,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285446,"byte_end":285510,"line_start":1034,"line_end":1034,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285551,"byte_end":285557,"line_start":1035,"line_end":1035,"column_start":41,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286447,"byte_end":286451,"line_start":1063,"line_end":1063,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S, A>>::take","value":"pub fn take<Q: ?Sized>(&mut Self, &Q) -> Option<T> where T: Borrow<Q>,\nQ: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285731,"byte_end":285816,"line_start":1044,"line_end":1044,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285821,"byte_end":285824,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285829,"byte_end":285896,"line_start":1046,"line_end":1046,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285901,"byte_end":285968,"line_start":1047,"line_end":1047,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285973,"byte_end":285992,"line_start":1048,"line_end":1048,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":285997,"byte_end":286000,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286005,"byte_end":286019,"line_start":1050,"line_end":1050,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286024,"byte_end":286027,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286032,"byte_end":286039,"line_start":1052,"line_end":1052,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286044,"byte_end":286071,"line_start":1053,"line_end":1053,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286076,"byte_end":286079,"line_start":1054,"line_end":1054,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286084,"byte_end":286150,"line_start":1055,"line_end":1055,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286155,"byte_end":286193,"line_start":1056,"line_end":1056,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286198,"byte_end":286233,"line_start":1057,"line_end":1057,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286238,"byte_end":286245,"line_start":1058,"line_end":1058,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286250,"byte_end":286253,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286258,"byte_end":286317,"line_start":1060,"line_end":1060,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286322,"byte_end":286386,"line_start":1061,"line_end":1061,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286427,"byte_end":286433,"line_start":1062,"line_end":1062,"column_start":41,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293087,"byte_end":293091,"line_start":1332,"line_end":1332,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1731}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292834,"byte_end":292880,"line_start":1325,"line_end":1325,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292881,"byte_end":292884,"line_start":1326,"line_end":1326,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292885,"byte_end":292952,"line_start":1327,"line_end":1327,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292953,"byte_end":292988,"line_start":1328,"line_end":1328,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292989,"byte_end":292992,"line_start":1329,"line_end":1329,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":292993,"byte_end":293029,"line_start":1330,"line_end":1330,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293030,"byte_end":293075,"line_start":1331,"line_end":1331,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293445,"byte_end":293453,"line_start":1343,"line_end":1343,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1735}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293131,"byte_end":293184,"line_start":1336,"line_end":1336,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293185,"byte_end":293188,"line_start":1337,"line_end":1337,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293189,"byte_end":293260,"line_start":1338,"line_end":1338,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293261,"byte_end":293336,"line_start":1339,"line_end":1339,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293337,"byte_end":293340,"line_start":1340,"line_end":1340,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293341,"byte_end":293377,"line_start":1341,"line_end":1341,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293378,"byte_end":293433,"line_start":1342,"line_end":1342,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293792,"byte_end":293797,"line_start":1354,"line_end":1354,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1740}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293528,"byte_end":293582,"line_start":1347,"line_end":1347,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293583,"byte_end":293586,"line_start":1348,"line_end":1348,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293587,"byte_end":293655,"line_start":1349,"line_end":1349,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293656,"byte_end":293691,"line_start":1350,"line_end":1350,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293692,"byte_end":293695,"line_start":1351,"line_end":1351,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293696,"byte_end":293732,"line_start":1352,"line_end":1352,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293733,"byte_end":293780,"line_start":1353,"line_end":1353,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294198,"byte_end":294209,"line_start":1365,"line_end":1365,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1746},{"krate":0,"index":1747}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293877,"byte_end":293967,"line_start":1358,"line_end":1358,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293968,"byte_end":293971,"line_start":1359,"line_end":1359,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":293972,"byte_end":294055,"line_start":1360,"line_end":1360,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294056,"byte_end":294083,"line_start":1361,"line_end":1361,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294084,"byte_end":294087,"line_start":1362,"line_end":1362,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294088,"byte_end":294149,"line_start":1363,"line_end":1363,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294150,"byte_end":294186,"line_start":1364,"line_end":1364,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294645,"byte_end":294657,"line_start":1380,"line_end":1380,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294341,"byte_end":294414,"line_start":1373,"line_end":1373,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294415,"byte_end":294418,"line_start":1374,"line_end":1374,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294419,"byte_end":294494,"line_start":1375,"line_end":1375,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294495,"byte_end":294530,"line_start":1376,"line_end":1376,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294531,"byte_end":294534,"line_start":1377,"line_end":1377,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294535,"byte_end":294571,"line_start":1378,"line_end":1378,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294572,"byte_end":294633,"line_start":1379,"line_end":1379,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295111,"byte_end":295121,"line_start":1394,"line_end":1394,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294815,"byte_end":294886,"line_start":1387,"line_end":1387,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294887,"byte_end":294890,"line_start":1388,"line_end":1388,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294891,"byte_end":294964,"line_start":1389,"line_end":1389,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":294965,"byte_end":295000,"line_start":1390,"line_end":1390,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295001,"byte_end":295004,"line_start":1391,"line_end":1391,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295005,"byte_end":295041,"line_start":1392,"line_end":1392,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295042,"byte_end":295099,"line_start":1393,"line_end":1393,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295615,"byte_end":295634,"line_start":1408,"line_end":1408,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1767}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295279,"byte_end":295360,"line_start":1401,"line_end":1401,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295361,"byte_end":295364,"line_start":1402,"line_end":1402,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295365,"byte_end":295435,"line_start":1403,"line_end":1403,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295436,"byte_end":295484,"line_start":1404,"line_end":1404,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295485,"byte_end":295488,"line_start":1405,"line_end":1405,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295489,"byte_end":295525,"line_start":1406,"line_end":1406,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295526,"byte_end":295603,"line_start":1407,"line_end":1407,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1768},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":296024,"byte_end":296029,"line_start":1419,"line_end":1419,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1773}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295748,"byte_end":295814,"line_start":1412,"line_end":1412,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295815,"byte_end":295818,"line_start":1413,"line_end":1413,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295819,"byte_end":295887,"line_start":1414,"line_end":1414,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295888,"byte_end":295923,"line_start":1415,"line_end":1415,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295924,"byte_end":295927,"line_start":1416,"line_end":1416,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295928,"byte_end":295964,"line_start":1417,"line_end":1417,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":295965,"byte_end":296012,"line_start":1418,"line_end":1418,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1977},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2149,"byte_end":2157,"line_start":82,"line_end":82,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1978}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2164,"byte_end":2230,"line_start":83,"line_end":83,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2704,"byte_end":2712,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1980}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":2719,"byte_end":2785,"line_start":100,"line_end":100,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2059},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3464,"byte_end":3480,"line_start":122,"line_end":122,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3348,"byte_end":3421,"line_start":120,"line_end":120,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3426,"byte_end":3459,"line_start":121,"line_end":121,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":2061},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3534,"byte_end":3544,"line_start":125,"line_end":125,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3487,"byte_end":3529,"line_start":124,"line_end":124,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":2058},"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3326,"byte_end":3341,"line_start":119,"line_end":119,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"pub enum TryReserveError {\n    CapacityOverflow,\n    AllocError {\n            layout: alloc::alloc::Layout,\n        },\n}","parent":null,"children":[{"krate":0,"index":2059},{"krate":0,"index":2061}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/lib.rs","byte_start":3232,"byte_end":3277,"line_start":117,"line_end":117,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/sse2.rs","byte_start":13899417,"byte_end":13899422,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91879,"byte_end":91885,"line_start":43,"line_end":43,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":92218,"byte_end":92224,"line_start":53,"line_end":53,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":93600,"byte_end":93607,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":96221,"byte_end":96228,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":96516,"byte_end":96527,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":9460,"byte_end":9471,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":12165,"byte_end":12173,"line_start":172,"line_end":172,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":14665,"byte_end":14676,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16581,"byte_end":16587,"line_start":292,"line_end":292,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16613,"byte_end":16619,"line_start":294,"line_end":294,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16752,"byte_end":16758,"line_start":301,"line_end":301,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19837,"byte_end":19845,"line_start":395,"line_end":395,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20966,"byte_end":20974,"line_start":423,"line_end":423,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48824,"byte_end":48832,"line_start":1124,"line_end":1124,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48902,"byte_end":48910,"line_start":1125,"line_end":1125,"column_start":47,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48943,"byte_end":48956,"line_start":1127,"line_end":1127,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":49377,"byte_end":49390,"line_start":1141,"line_end":1141,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":61603,"byte_end":61611,"line_start":1469,"line_end":1469,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":64248,"byte_end":64256,"line_start":1538,"line_end":1538,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":65150,"byte_end":65158,"line_start":1563,"line_end":1563,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":68705,"byte_end":68713,"line_start":1652,"line_end":1652,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":69273,"byte_end":69281,"line_start":1672,"line_end":1672,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":69586,"byte_end":69594,"line_start":1684,"line_end":1684,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":70445,"byte_end":70457,"line_start":1715,"line_end":1715,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73280,"byte_end":73292,"line_start":1784,"line_end":1784,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73323,"byte_end":73335,"line_start":1785,"line_end":1785,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73361,"byte_end":73373,"line_start":1787,"line_end":1787,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73663,"byte_end":73675,"line_start":1799,"line_end":1799,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75142,"byte_end":75154,"line_start":1837,"line_end":1837,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76049,"byte_end":76056,"line_start":1856,"line_end":1856,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":82182,"byte_end":82189,"line_start":1982,"line_end":1982,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":82397,"byte_end":82404,"line_start":1992,"line_end":1992,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83089,"byte_end":83096,"line_start":2015,"line_end":2015,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83129,"byte_end":83136,"line_start":2016,"line_end":2016,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83405,"byte_end":83416,"line_start":2026,"line_end":2026,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83594,"byte_end":83605,"line_start":2033,"line_end":2033,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83675,"byte_end":83686,"line_start":2034,"line_end":2034,"column_start":47,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":84238,"byte_end":84249,"line_start":2052,"line_end":2052,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":84649,"byte_end":84660,"line_start":2067,"line_end":2067,"column_start":44,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85025,"byte_end":85036,"line_start":2081,"line_end":2081,"column_start":53,"column_end":64},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85094,"byte_end":85105,"line_start":2082,"line_end":2082,"column_start":49,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85710,"byte_end":85718,"line_start":2099,"line_end":2099,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85899,"byte_end":85907,"line_start":2106,"line_end":2106,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85980,"byte_end":85988,"line_start":2107,"line_end":2107,"column_start":46,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":86056,"byte_end":86064,"line_start":2109,"line_end":2109,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":86669,"byte_end":86677,"line_start":2128,"line_end":2128,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87095,"byte_end":87103,"line_start":2145,"line_end":2145,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87165,"byte_end":87173,"line_start":2146,"line_end":2146,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87827,"byte_end":87838,"line_start":2171,"line_end":2171,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":88126,"byte_end":88142,"line_start":2180,"line_end":2180,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":88730,"byte_end":88741,"line_start":2200,"line_end":2200,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":89059,"byte_end":89075,"line_start":2213,"line_end":2213,"column_start":45,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":97473,"byte_end":97480,"line_start":24,"line_end":24,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":97865,"byte_end":97872,"line_start":39,"line_end":39,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":98288,"byte_end":98298,"line_start":53,"line_end":53,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":99771,"byte_end":99778,"line_start":102,"line_end":102,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":100135,"byte_end":100142,"line_start":116,"line_end":116,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":100517,"byte_end":100527,"line_start":129,"line_end":129,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":101907,"byte_end":101924,"line_start":170,"line_end":170,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":110005,"byte_end":110012,"line_start":197,"line_end":197,"column_start":68,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112172,"byte_end":112179,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113272,"byte_end":113279,"line_start":308,"line_end":308,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114149,"byte_end":114156,"line_start":328,"line_end":328,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116664,"byte_end":116671,"line_start":397,"line_end":397,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127618,"byte_end":127625,"line_start":778,"line_end":778,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147306,"byte_end":147313,"line_start":1371,"line_end":1371,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150258,"byte_end":150265,"line_start":1429,"line_end":1429,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150618,"byte_end":150625,"line_start":1446,"line_end":1446,"column_start":25,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150751,"byte_end":150758,"line_start":1455,"line_end":1455,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150986,"byte_end":150993,"line_start":1466,"line_end":1466,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151365,"byte_end":151372,"line_start":1478,"line_end":1478,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152247,"byte_end":152251,"line_start":1511,"line_end":1511,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152489,"byte_end":152493,"line_start":1521,"line_end":1521,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153271,"byte_end":153278,"line_start":1543,"line_end":1543,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153304,"byte_end":153311,"line_start":1545,"line_end":1545,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154031,"byte_end":154039,"line_start":1567,"line_end":1567,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154697,"byte_end":154701,"line_start":1590,"line_end":1590,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154899,"byte_end":154903,"line_start":1599,"line_end":1599,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155427,"byte_end":155433,"line_start":1617,"line_end":1617,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155633,"byte_end":155639,"line_start":1626,"line_end":1626,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156165,"byte_end":156170,"line_start":1643,"line_end":1643,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156961,"byte_end":156972,"line_start":1669,"line_end":1669,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157395,"byte_end":157411,"line_start":1686,"line_end":1686,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157564,"byte_end":157575,"line_start":1693,"line_end":1693,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157975,"byte_end":157986,"line_start":1711,"line_end":1711,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158280,"byte_end":158296,"line_start":1719,"line_end":1719,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160505,"byte_end":160524,"line_start":1785,"line_end":1785,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160643,"byte_end":160662,"line_start":1792,"line_end":1792,"column_start":34,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161398,"byte_end":161416,"line_start":1818,"line_end":1818,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162230,"byte_end":162248,"line_start":1844,"line_end":1844,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163289,"byte_end":163304,"line_start":1874,"line_end":1874,"column_start":41,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164741,"byte_end":164752,"line_start":1921,"line_end":1921,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170625,"byte_end":170644,"line_start":2115,"line_end":2115,"column_start":41,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174694,"byte_end":174711,"line_start":2233,"line_end":2233,"column_start":41,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":176757,"byte_end":176775,"line_start":2301,"line_end":2301,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":176977,"byte_end":176988,"line_start":2307,"line_end":2307,"column_start":61,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177347,"byte_end":177366,"line_start":2316,"line_end":2316,"column_start":61,"column_end":80},"value":"","parent":null,"children":[{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177649,"byte_end":177666,"line_start":2325,"line_end":2325,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177856,"byte_end":177871,"line_start":2331,"line_end":2331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178535,"byte_end":178540,"line_start":2354,"line_end":2354,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1156}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179152,"byte_end":179165,"line_start":2374,"line_end":2374,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179297,"byte_end":179310,"line_start":2382,"line_end":2382,"column_start":34,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179470,"byte_end":179483,"line_start":2391,"line_end":2391,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180026,"byte_end":180037,"line_start":2410,"line_end":2410,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180693,"byte_end":180706,"line_start":2426,"line_end":2426,"column_start":61,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":181073,"byte_end":181086,"line_start":2437,"line_end":2437,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":181997,"byte_end":182004,"line_start":2470,"line_end":2470,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":182792,"byte_end":182796,"line_start":2499,"line_end":2499,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183367,"byte_end":183371,"line_start":2518,"line_end":2518,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183525,"byte_end":183529,"line_start":2525,"line_end":2525,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183572,"byte_end":183579,"line_start":2527,"line_end":2527,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184162,"byte_end":184169,"line_start":2546,"line_end":2546,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1269}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184322,"byte_end":184329,"line_start":2552,"line_end":2552,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184370,"byte_end":184377,"line_start":2554,"line_end":2554,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184605,"byte_end":184613,"line_start":2564,"line_end":2564,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184969,"byte_end":184977,"line_start":2576,"line_end":2576,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185151,"byte_end":185159,"line_start":2582,"line_end":2582,"column_start":52,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185235,"byte_end":185243,"line_start":2584,"line_end":2584,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1297}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185408,"byte_end":185412,"line_start":2590,"line_end":2590,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185884,"byte_end":185888,"line_start":2606,"line_end":2606,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1308}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186041,"byte_end":186045,"line_start":2612,"line_end":2612,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186088,"byte_end":186094,"line_start":2614,"line_end":2614,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186566,"byte_end":186572,"line_start":2630,"line_end":2630,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1322}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186725,"byte_end":186731,"line_start":2636,"line_end":2636,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186774,"byte_end":186783,"line_start":2638,"line_end":2638,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187263,"byte_end":187272,"line_start":2654,"line_end":2654,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187425,"byte_end":187434,"line_start":2660,"line_end":2660,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187475,"byte_end":187484,"line_start":2662,"line_end":2662,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187722,"byte_end":187727,"line_start":2672,"line_end":2672,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188087,"byte_end":188092,"line_start":2684,"line_end":2684,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1356}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188270,"byte_end":188275,"line_start":2690,"line_end":2690,"column_start":52,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188322,"byte_end":188327,"line_start":2692,"line_end":2692,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1365}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188578,"byte_end":188583,"line_start":2703,"line_end":2703,"column_start":41,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195469,"byte_end":195474,"line_start":2937,"line_end":2937,"column_start":50,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196256,"byte_end":196269,"line_start":2964,"line_end":2964,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205793,"byte_end":205804,"line_start":3278,"line_end":3278,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":208084,"byte_end":208091,"line_start":3365,"line_end":3365,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":208735,"byte_end":208742,"line_start":3385,"line_end":3385,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":210221,"byte_end":210228,"line_start":3431,"line_end":3431,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252378,"byte_end":252388,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1494}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252541,"byte_end":252551,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1498}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252695,"byte_end":252705,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256988,"byte_end":256995,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1584},{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257238,"byte_end":257245,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1589}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258392,"byte_end":258399,"line_start":172,"line_end":172,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259557,"byte_end":259564,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1607},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264113,"byte_end":264120,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266572,"byte_end":266579,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269218,"byte_end":269225,"line_start":532,"line_end":532,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1632},{"krate":0,"index":1634},{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286771,"byte_end":286778,"line_start":1076,"line_end":1076,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1665}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287058,"byte_end":287065,"line_start":1091,"line_end":1091,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287179,"byte_end":287186,"line_start":1099,"line_end":1099,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287450,"byte_end":287457,"line_start":1110,"line_end":1110,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287614,"byte_end":287621,"line_start":1119,"line_end":1119,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287994,"byte_end":288001,"line_start":1133,"line_end":1133,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":288599,"byte_end":288606,"line_start":1157,"line_end":1157,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":289203,"byte_end":289210,"line_start":1181,"line_end":1181,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1705}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":296433,"byte_end":296440,"line_start":1433,"line_end":1433,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297324,"byte_end":297328,"line_start":1465,"line_end":1465,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297512,"byte_end":297516,"line_start":1473,"line_end":1473,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297845,"byte_end":297849,"line_start":1485,"line_end":1485,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1801}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297995,"byte_end":297999,"line_start":1491,"line_end":1491,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298046,"byte_end":298050,"line_start":1493,"line_end":1493,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1806}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298229,"byte_end":298237,"line_start":1499,"line_end":1499,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298714,"byte_end":298722,"line_start":1515,"line_end":1515,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1816}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298889,"byte_end":298897,"line_start":1521,"line_end":1521,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298965,"byte_end":298973,"line_start":1523,"line_end":1523,"column_start":58,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299212,"byte_end":299217,"line_start":1530,"line_end":1530,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299698,"byte_end":299703,"line_start":1546,"line_end":1546,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299874,"byte_end":299879,"line_start":1552,"line_end":1552,"column_start":49,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299951,"byte_end":299956,"line_start":1554,"line_end":1554,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":300202,"byte_end":300213,"line_start":1561,"line_end":1561,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":300549,"byte_end":300560,"line_start":1575,"line_end":1575,"column_start":47,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1856}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301002,"byte_end":301013,"line_start":1594,"line_end":1594,"column_start":52,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301106,"byte_end":301118,"line_start":1599,"line_end":1599,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1865}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301343,"byte_end":301355,"line_start":1609,"line_end":1609,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301925,"byte_end":301937,"line_start":1634,"line_end":1634,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302194,"byte_end":302206,"line_start":1645,"line_end":1645,"column_start":33,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302338,"byte_end":302348,"line_start":1653,"line_end":1653,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1887}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302571,"byte_end":302581,"line_start":1663,"line_end":1663,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303155,"byte_end":303165,"line_start":1688,"line_end":1688,"column_start":33,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303283,"byte_end":303293,"line_start":1696,"line_end":1696,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303561,"byte_end":303580,"line_start":1707,"line_end":1707,"column_start":44,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1909}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303792,"byte_end":303811,"line_start":1716,"line_end":1716,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304215,"byte_end":304234,"line_start":1734,"line_end":1734,"column_start":33,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304352,"byte_end":304371,"line_start":1742,"line_end":1742,"column_start":30,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1926}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304639,"byte_end":304644,"line_start":1753,"line_end":1753,"column_start":44,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304843,"byte_end":304848,"line_start":1762,"line_end":1762,"column_start":33,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304966,"byte_end":304971,"line_start":1770,"line_end":1770,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1940}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":305227,"byte_end":305232,"line_start":1781,"line_end":1781,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/sse2.rs","byte_start":13899417,"byte_end":13899422,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2025},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":91879,"byte_end":91885,"line_start":43,"line_end":43,"column_start":31,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2031},"to":{"krate":0,"index":66}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/alloc.rs","byte_start":92218,"byte_end":92224,"line_start":53,"line_end":53,"column_start":22,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":93600,"byte_end":93607,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2036},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":96221,"byte_end":96228,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2036},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/bitmask.rs","byte_start":96516,"byte_end":96527,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":110},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":9460,"byte_end":9471,"line_start":93,"line_end":93,"column_start":6,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2042},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":12165,"byte_end":12173,"line_start":172,"line_end":172,"column_start":6,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":14665,"byte_end":14676,"line_start":240,"line_end":240,"column_start":6,"column_end":17},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16581,"byte_end":16587,"line_start":292,"line_end":292,"column_start":25,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16613,"byte_end":16619,"line_start":294,"line_end":294,"column_start":19,"column_end":25},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":16752,"byte_end":16758,"line_start":301,"line_end":301,"column_start":9,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":19837,"byte_end":19845,"line_start":395,"line_end":395,"column_start":9,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":20966,"byte_end":20974,"line_start":423,"line_end":423,"column_start":31,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48824,"byte_end":48832,"line_start":1124,"line_end":1124,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48902,"byte_end":48910,"line_start":1125,"line_end":1125,"column_start":47,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":48943,"byte_end":48956,"line_start":1127,"line_end":1127,"column_start":9,"column_end":22},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":49377,"byte_end":49390,"line_start":1141,"line_end":1141,"column_start":28,"column_end":41},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":61603,"byte_end":61611,"line_start":1469,"line_end":1469,"column_start":48,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":64248,"byte_end":64256,"line_start":1538,"line_end":1538,"column_start":56,"column_end":64},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":176},"to":{"krate":0,"index":298}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":65150,"byte_end":65158,"line_start":1563,"line_end":1563,"column_start":38,"column_end":46},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":176},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":68705,"byte_end":68713,"line_start":1652,"line_end":1652,"column_start":53,"column_end":61},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":69273,"byte_end":69281,"line_start":1672,"line_end":1672,"column_start":40,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":69586,"byte_end":69594,"line_start":1684,"line_end":1684,"column_start":48,"column_end":56},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":176},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":70445,"byte_end":70457,"line_start":1715,"line_end":1715,"column_start":9,"column_end":21},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73280,"byte_end":73292,"line_start":1784,"line_end":1784,"column_start":25,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73323,"byte_end":73335,"line_start":1785,"line_end":1785,"column_start":25,"column_end":37},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73361,"byte_end":73373,"line_start":1787,"line_end":1787,"column_start":19,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":73663,"byte_end":73675,"line_start":1799,"line_end":1799,"column_start":22,"column_end":34},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":75142,"byte_end":75154,"line_start":1837,"line_end":1837,"column_start":27,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":327},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":76049,"byte_end":76056,"line_start":1856,"line_end":1856,"column_start":9,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":82182,"byte_end":82189,"line_start":1982,"line_end":1982,"column_start":19,"column_end":26},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":82397,"byte_end":82404,"line_start":1992,"line_end":1992,"column_start":22,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83089,"byte_end":83096,"line_start":2015,"line_end":2015,"column_start":31,"column_end":38},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83129,"byte_end":83136,"line_start":2016,"line_end":2016,"column_start":27,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":350},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83405,"byte_end":83416,"line_start":2026,"line_end":2026,"column_start":31,"column_end":42},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83594,"byte_end":83605,"line_start":2033,"line_end":2033,"column_start":47,"column_end":58},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":83675,"byte_end":83686,"line_start":2034,"line_end":2034,"column_start":47,"column_end":58},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":84238,"byte_end":84249,"line_start":2052,"line_end":2052,"column_start":40,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":84649,"byte_end":84660,"line_start":2067,"line_end":2067,"column_start":44,"column_end":55},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85025,"byte_end":85036,"line_start":2081,"line_end":2081,"column_start":53,"column_end":64},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85094,"byte_end":85105,"line_start":2082,"line_end":2082,"column_start":49,"column_end":60},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":372},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85710,"byte_end":85718,"line_start":2099,"line_end":2099,"column_start":31,"column_end":39},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85899,"byte_end":85907,"line_start":2106,"line_end":2106,"column_start":46,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":85980,"byte_end":85988,"line_start":2107,"line_end":2107,"column_start":46,"column_end":54},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":86056,"byte_end":86064,"line_start":2109,"line_end":2109,"column_start":40,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":86669,"byte_end":86677,"line_start":2128,"line_end":2128,"column_start":44,"column_end":52},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87095,"byte_end":87103,"line_start":2145,"line_end":2145,"column_start":53,"column_end":61},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87165,"byte_end":87173,"line_start":2146,"line_end":2146,"column_start":49,"column_end":57},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":405},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":87827,"byte_end":87838,"line_start":2171,"line_end":2171,"column_start":35,"column_end":46},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":88126,"byte_end":88142,"line_start":2180,"line_end":2180,"column_start":32,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":88730,"byte_end":88741,"line_start":2200,"line_end":2200,"column_start":48,"column_end":59},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/raw/mod.rs","byte_start":89059,"byte_end":89075,"line_start":2213,"line_end":2213,"column_start":45,"column_end":61},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":445},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":97473,"byte_end":97480,"line_start":24,"line_end":24,"column_start":33,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":688},"to":{"krate":5,"index":2100}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":97865,"byte_end":97872,"line_start":39,"line_end":39,"column_start":45,"column_end":52},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":688},"to":{"krate":5,"index":1559}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":98288,"byte_end":98298,"line_start":53,"line_end":53,"column_start":49,"column_end":59},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":534},"to":{"krate":5,"index":1645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":99771,"byte_end":99778,"line_start":102,"line_end":102,"column_start":30,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1575},"to":{"krate":5,"index":2100}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":100135,"byte_end":100142,"line_start":116,"line_end":116,"column_start":42,"column_end":49},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1575},"to":{"krate":5,"index":1559}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":100517,"byte_end":100527,"line_start":129,"line_end":129,"column_start":46,"column_end":56},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":599},"to":{"krate":5,"index":1645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/external_trait_impls/serde.rs","byte_start":101907,"byte_end":101924,"line_start":170,"line_end":170,"column_start":50,"column_end":67},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":613},"to":{"krate":5,"index":1645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":110005,"byte_end":110012,"line_start":197,"line_end":197,"column_start":68,"column_end":75},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":112172,"byte_end":112179,"line_start":273,"line_end":273,"column_start":12,"column_end":19},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":113272,"byte_end":113279,"line_start":308,"line_end":308,"column_start":34,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":114149,"byte_end":114156,"line_start":328,"line_end":328,"column_start":15,"column_end":22},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":116664,"byte_end":116671,"line_start":397,"line_end":397,"column_start":37,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":127618,"byte_end":127625,"line_start":778,"line_end":778,"column_start":18,"column_end":25},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":147306,"byte_end":147313,"line_start":1371,"line_end":1371,"column_start":37,"column_end":44},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":688},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150258,"byte_end":150265,"line_start":1429,"line_end":1429,"column_start":32,"column_end":39},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150618,"byte_end":150625,"line_start":1446,"line_end":1446,"column_start":25,"column_end":32},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150751,"byte_end":150758,"line_start":1455,"line_end":1455,"column_start":28,"column_end":35},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":150986,"byte_end":150993,"line_start":1466,"line_end":1466,"column_start":30,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":151365,"byte_end":151372,"line_start":1478,"line_end":1478,"column_start":43,"column_end":50},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":3327}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152247,"byte_end":152251,"line_start":1511,"line_end":1511,"column_start":22,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":152489,"byte_end":152493,"line_start":1521,"line_end":1521,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153271,"byte_end":153278,"line_start":1543,"line_end":1543,"column_start":40,"column_end":47},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":153304,"byte_end":153311,"line_start":1545,"line_end":1545,"column_start":12,"column_end":19},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154031,"byte_end":154039,"line_start":1567,"line_end":1567,"column_start":34,"column_end":42},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154697,"byte_end":154701,"line_start":1590,"line_end":1590,"column_start":22,"column_end":26},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":879},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":154899,"byte_end":154903,"line_start":1599,"line_end":1599,"column_start":34,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":879},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155427,"byte_end":155433,"line_start":1617,"line_end":1617,"column_start":22,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":155633,"byte_end":155639,"line_start":1626,"line_end":1626,"column_start":34,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156165,"byte_end":156170,"line_start":1643,"line_end":1643,"column_start":34,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":905},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":156961,"byte_end":156972,"line_start":1669,"line_end":1669,"column_start":31,"column_end":42},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157395,"byte_end":157411,"line_start":1686,"line_end":1686,"column_start":28,"column_end":44},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157564,"byte_end":157575,"line_start":1693,"line_end":1693,"column_start":31,"column_end":42},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":157975,"byte_end":157986,"line_start":1711,"line_end":1711,"column_start":33,"column_end":44},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":916},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":158280,"byte_end":158296,"line_start":1719,"line_end":1719,"column_start":34,"column_end":50},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160505,"byte_end":160524,"line_start":1785,"line_end":1785,"column_start":34,"column_end":53},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":988},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":160643,"byte_end":160662,"line_start":1792,"line_end":1792,"column_start":34,"column_end":53},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":988},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":161398,"byte_end":161416,"line_start":1818,"line_end":1818,"column_start":41,"column_end":59},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":162230,"byte_end":162248,"line_start":1844,"line_end":1844,"column_start":41,"column_end":59},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":969},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":163289,"byte_end":163304,"line_start":1874,"line_end":1874,"column_start":41,"column_end":56},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1015},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":164741,"byte_end":164752,"line_start":1921,"line_end":1921,"column_start":41,"column_end":52},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":170625,"byte_end":170644,"line_start":2115,"line_end":2115,"column_start":41,"column_end":60},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":174694,"byte_end":174711,"line_start":2233,"line_end":2233,"column_start":41,"column_end":58},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1007},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":176757,"byte_end":176775,"line_start":2301,"line_end":2301,"column_start":47,"column_end":65},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":969},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":176977,"byte_end":176988,"line_start":2307,"line_end":2307,"column_start":61,"column_end":72},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":976},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177347,"byte_end":177366,"line_start":2316,"line_end":2316,"column_start":61,"column_end":80},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":988},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177649,"byte_end":177666,"line_start":2325,"line_end":2325,"column_start":47,"column_end":64},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1007},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":177856,"byte_end":177871,"line_start":2331,"line_end":2331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1015},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":178535,"byte_end":178540,"line_start":2354,"line_end":2354,"column_start":61,"column_end":66},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1139},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179152,"byte_end":179165,"line_start":2374,"line_end":2374,"column_start":34,"column_end":47},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3024}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179297,"byte_end":179310,"line_start":2382,"line_end":2382,"column_start":34,"column_end":47},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":3036}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":179470,"byte_end":179483,"line_start":2391,"line_end":2391,"column_start":61,"column_end":74},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1157},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180026,"byte_end":180037,"line_start":2410,"line_end":2410,"column_start":54,"column_end":65},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1183},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":180693,"byte_end":180706,"line_start":2426,"line_end":2426,"column_start":61,"column_end":74},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1198},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":181073,"byte_end":181086,"line_start":2437,"line_end":2437,"column_start":9,"column_end":22},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1198},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":181997,"byte_end":182004,"line_start":2470,"line_end":2470,"column_start":54,"column_end":61},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":182792,"byte_end":182796,"line_start":2499,"line_end":2499,"column_start":29,"column_end":33},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183367,"byte_end":183371,"line_start":2518,"line_end":2518,"column_start":34,"column_end":38},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183525,"byte_end":183529,"line_start":2525,"line_end":2525,"column_start":30,"column_end":34},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":842},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":183572,"byte_end":183579,"line_start":2527,"line_end":2527,"column_start":29,"column_end":36},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184162,"byte_end":184169,"line_start":2546,"line_end":2546,"column_start":34,"column_end":41},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184322,"byte_end":184329,"line_start":2552,"line_end":2552,"column_start":30,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184370,"byte_end":184377,"line_start":2554,"line_end":2554,"column_start":27,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":856},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184605,"byte_end":184613,"line_start":2564,"line_end":2564,"column_start":47,"column_end":55},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":184969,"byte_end":184977,"line_start":2576,"line_end":2576,"column_start":56,"column_end":64},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185151,"byte_end":185159,"line_start":2582,"line_end":2582,"column_start":52,"column_end":60},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185235,"byte_end":185243,"line_start":2584,"line_end":2584,"column_start":63,"column_end":71},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":869},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185408,"byte_end":185412,"line_start":2590,"line_end":2590,"column_start":29,"column_end":33},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":879},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":185884,"byte_end":185888,"line_start":2606,"line_end":2606,"column_start":34,"column_end":38},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":879},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186041,"byte_end":186045,"line_start":2612,"line_end":2612,"column_start":30,"column_end":34},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":879},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186088,"byte_end":186094,"line_start":2614,"line_end":2614,"column_start":29,"column_end":35},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186566,"byte_end":186572,"line_start":2630,"line_end":2630,"column_start":34,"column_end":40},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186725,"byte_end":186731,"line_start":2636,"line_end":2636,"column_start":30,"column_end":36},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":892},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":186774,"byte_end":186783,"line_start":2638,"line_end":2638,"column_start":29,"column_end":38},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":964},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187263,"byte_end":187272,"line_start":2654,"line_end":2654,"column_start":34,"column_end":43},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":964},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187425,"byte_end":187434,"line_start":2660,"line_end":2660,"column_start":30,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":964},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187475,"byte_end":187484,"line_start":2662,"line_end":2662,"column_start":27,"column_end":36},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":964},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":187722,"byte_end":187727,"line_start":2672,"line_end":2672,"column_start":51,"column_end":56},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":905},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188087,"byte_end":188092,"line_start":2684,"line_end":2684,"column_start":56,"column_end":61},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":905},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188270,"byte_end":188275,"line_start":2690,"line_end":2690,"column_start":52,"column_end":57},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":905},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188322,"byte_end":188327,"line_start":2692,"line_end":2692,"column_start":30,"column_end":35},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":905},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":188578,"byte_end":188583,"line_start":2703,"line_end":2703,"column_start":41,"column_end":46},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":195469,"byte_end":195474,"line_start":2937,"line_end":2937,"column_start":50,"column_end":55},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":196256,"byte_end":196269,"line_start":2964,"line_end":2964,"column_start":41,"column_end":54},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":205793,"byte_end":205804,"line_start":3278,"line_end":3278,"column_start":41,"column_end":52},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":208084,"byte_end":208091,"line_start":3365,"line_end":3365,"column_start":43,"column_end":50},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":208735,"byte_end":208742,"line_start":3385,"line_end":3385,"column_start":37,"column_end":44},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/map.rs","byte_start":210221,"byte_end":210228,"line_start":3431,"line_end":3431,"column_start":49,"column_end":56},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252378,"byte_end":252388,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1482},"to":{"krate":1,"index":3242}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252541,"byte_end":252551,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1482},"to":{"krate":1,"index":3255}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/scopeguard.rs","byte_start":252695,"byte_end":252705,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1482},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":256988,"byte_end":256995,"line_start":119,"line_end":119,"column_start":58,"column_end":65},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":257238,"byte_end":257245,"line_start":132,"line_end":132,"column_start":9,"column_end":16},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":258392,"byte_end":258399,"line_start":172,"line_end":172,"column_start":42,"column_end":49},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":259557,"byte_end":259564,"line_start":211,"line_end":211,"column_start":34,"column_end":41},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":264113,"byte_end":264120,"line_start":385,"line_end":385,"column_start":12,"column_end":19},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":266572,"byte_end":266579,"line_start":453,"line_end":453,"column_start":15,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":269218,"byte_end":269225,"line_start":532,"line_end":532,"column_start":15,"column_end":22},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":286771,"byte_end":286778,"line_start":1076,"line_end":1076,"column_start":29,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287058,"byte_end":287065,"line_start":1091,"line_end":1091,"column_start":22,"column_end":29},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2680}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287179,"byte_end":287186,"line_start":1099,"line_end":1099,"column_start":30,"column_end":37},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287450,"byte_end":287457,"line_start":1110,"line_end":1110,"column_start":46,"column_end":53},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287614,"byte_end":287621,"line_start":1119,"line_end":1119,"column_start":35,"column_end":42},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":7711}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":287994,"byte_end":288001,"line_start":1133,"line_end":1133,"column_start":29,"column_end":36},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":288599,"byte_end":288606,"line_start":1157,"line_end":1157,"column_start":37,"column_end":44},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":7724}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":289203,"byte_end":289210,"line_start":1181,"line_end":1181,"column_start":27,"column_end":34},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":3002}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":296433,"byte_end":296440,"line_start":1433,"line_end":1433,"column_start":51,"column_end":58},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1575},"to":{"krate":1,"index":7715}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297324,"byte_end":297328,"line_start":1465,"line_end":1465,"column_start":19,"column_end":23},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1728},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297512,"byte_end":297516,"line_start":1473,"line_end":1473,"column_start":26,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1728},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297845,"byte_end":297849,"line_start":1485,"line_end":1485,"column_start":35,"column_end":39},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1728},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":297995,"byte_end":297999,"line_start":1491,"line_end":1491,"column_start":27,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1728},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298046,"byte_end":298050,"line_start":1493,"line_end":1493,"column_start":36,"column_end":40},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1728},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298229,"byte_end":298237,"line_start":1499,"line_end":1499,"column_start":44,"column_end":52},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1732},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298714,"byte_end":298722,"line_start":1515,"line_end":1515,"column_start":53,"column_end":61},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1732},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298889,"byte_end":298897,"line_start":1521,"line_end":1521,"column_start":49,"column_end":57},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1732},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":298965,"byte_end":298973,"line_start":1523,"line_end":1523,"column_start":58,"column_end":66},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1732},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299212,"byte_end":299217,"line_start":1530,"line_end":1530,"column_start":44,"column_end":49},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299698,"byte_end":299703,"line_start":1546,"line_end":1546,"column_start":53,"column_end":58},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":7784}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299874,"byte_end":299879,"line_start":1552,"line_end":1552,"column_start":49,"column_end":54},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":299951,"byte_end":299956,"line_start":1554,"line_end":1554,"column_start":58,"column_end":63},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1736},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":300202,"byte_end":300213,"line_start":1561,"line_end":1561,"column_start":47,"column_end":58},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1741},"to":{"krate":1,"index":3266}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":300549,"byte_end":300560,"line_start":1575,"line_end":1575,"column_start":47,"column_end":58},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1741},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301002,"byte_end":301013,"line_start":1594,"line_end":1594,"column_start":52,"column_end":63},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1741},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301106,"byte_end":301118,"line_start":1599,"line_end":1599,"column_start":44,"column_end":56},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1748},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301343,"byte_end":301355,"line_start":1609,"line_end":1609,"column_start":32,"column_end":44},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1748},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":301925,"byte_end":301937,"line_start":1634,"line_end":1634,"column_start":30,"column_end":42},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1748},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302194,"byte_end":302206,"line_start":1645,"line_end":1645,"column_start":33,"column_end":45},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1748},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302338,"byte_end":302348,"line_start":1653,"line_end":1653,"column_start":44,"column_end":54},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1755},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":302571,"byte_end":302581,"line_start":1663,"line_end":1663,"column_start":32,"column_end":42},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1755},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303155,"byte_end":303165,"line_start":1688,"line_end":1688,"column_start":33,"column_end":43},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1755},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303283,"byte_end":303293,"line_start":1696,"line_end":1696,"column_start":30,"column_end":40},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1755},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303561,"byte_end":303580,"line_start":1707,"line_end":1707,"column_start":44,"column_end":63},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":303792,"byte_end":303811,"line_start":1716,"line_end":1716,"column_start":32,"column_end":51},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":7907}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304215,"byte_end":304234,"line_start":1734,"line_end":1734,"column_start":33,"column_end":52},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304352,"byte_end":304371,"line_start":1742,"line_end":1742,"column_start":30,"column_end":49},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1762},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304639,"byte_end":304644,"line_start":1753,"line_end":1753,"column_start":44,"column_end":49},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":2645}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304843,"byte_end":304848,"line_start":1762,"line_end":1762,"column_start":33,"column_end":38},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":8180}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":304966,"byte_end":304971,"line_start":1770,"line_end":1770,"column_start":30,"column_end":35},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":9597}},{"span":{"file_name":"/Users/jackson/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.11.2/src/set.rs","byte_start":305227,"byte_end":305232,"line_start":1781,"line_end":1781,"column_start":32,"column_end":37},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1768},"to":{"krate":1,"index":7907}}]}